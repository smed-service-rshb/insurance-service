/**
 * NOTE: This class is auto generated by the swagger code generator program (2.3.1).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package ru.softlab.efr.services.insurance.controllers;

import ru.softlab.efr.services.insurance.model.rest.AttachedDocRs;
import ru.softlab.efr.services.insurance.model.rest.AttachedList;
import ru.softlab.efr.services.insurance.model.rest.AttachedRequestAttachData;
import ru.softlab.efr.services.insurance.model.rest.Attachment;
import ru.softlab.efr.services.insurance.model.rest.AttachmentData;
import ru.softlab.efr.services.insurance.model.rest.ErrorModel;
import org.springframework.core.io.Resource;
import ru.softlab.efr.services.insurance.model.rest.Statement;
import ru.softlab.efr.services.insurance.model.rest.StatementsData;
import ru.softlab.efr.services.insurance.model.rest.UuidRs;

import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.validation.BindingResult;
import org.springframework.data.web.PageableDefault;
import org.springframework.data.domain.*;

import java.util.*;

import org.springframework.validation.annotation.Validated;
import javax.validation.constraints.*;
import javax.validation.Valid;

/**
 * the Attachments API
 */
public interface AttachmentsApi {

    /**
     * Добавить комментарий к заявлению 
     * @param statementId Id заявления.
     * @param comment комментарий к заявлению  
     * @return Экземпляр класса {@link ResponseEntity}
     * @throws Exception исключение, выбрасываемое в случае ошибок при выполнении метода
     */
    @RequestMapping(value = "/insurance-service/v2/contract/attachments/statements/{statementId}/comment",
        method = RequestMethod.POST)
    ResponseEntity<Void> changeStatementComment(@PathVariable("statementId") Long statementId,@NotNull  @Valid @RequestParam(value = "comment") String comment) throws Exception;



    /**
     * Создать форму заявления. 
     * @param insuranceId Идентификатор экземпляра договора страхования
     * @param statementType Статус заявления:   NEED_WITHDRAW_APPLICATION - Требуется заявление о выплате,   WITHDRAW_APPLICATION_RECEIVED - Получено заявление о выплате,   CHANGING_APPLICATION_RECEIVED - Получено заявление на изменение договора,   REFUSING_APPLICATION_RECEIVED - Получено заявление об отказе,   CANCELLATION_APPLICATION_RECEIVED - Получено заявление о расторжении договора   
     * @return Экземпляр класса {@link ResponseEntity}
     * @throws Exception исключение, выбрасываемое в случае ошибок при выполнении метода
     */
    @RequestMapping(value = "/insurance-service/v2/contract/{insuranceId}/attachments/statements/{statementType}",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Statement> createStatement(@PathVariable("insuranceId") Long insuranceId,@PathVariable("statementType") String statementType) throws Exception;



    /**
     * Удалить файл. 
     * @param attachId Идентификатор файла, прикреплённого к договору страхования.  
     * @return Экземпляр класса {@link ResponseEntity}
     * @throws Exception исключение, выбрасываемое в случае ошибок при выполнении метода
     */
    @RequestMapping(value = "/insurance-service/v2/contract/attachment/{attachId}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteAttachment(@PathVariable("attachId") String attachId) throws Exception;



    /**
     * Удалить файл, прикреплённый к обращению клиента 
     * @param requestAttachId Идентификатор файла, прикреплённого к обращению клиента  
     * @return Экземпляр класса {@link ResponseEntity}
     * @throws Exception исключение, выбрасываемое в случае ошибок при выполнении метода
     */
    @RequestMapping(value = "/insurance-service/v2/client-request/{requestAttachId}/attachment",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteRequestAttachment(@PathVariable("requestAttachId") Long requestAttachId) throws Exception;



    /**
     * Получить контент документа 
     * @param attachId Идентификатор файла, прикреплённого к договору страхования.  
     * @return Экземпляр класса {@link ResponseEntity}
     * @throws Exception исключение, выбрасываемое в случае ошибок при выполнении метода
     */
    @RequestMapping(value = "/insurance-service/v2/contract/attachment/{attachId}",
        produces = { "application/octet-stream" }, 
        method = RequestMethod.GET)
    ResponseEntity<byte[]> getAttachmentContent(@PathVariable("attachId") String attachId) throws Exception;



    /**
     * Получить список с информацией по всем прикрепленным документам 
     * @param id Идентификатор экземпляра договора страхования.  
     * @return Экземпляр класса {@link ResponseEntity}
     * @throws Exception исключение, выбрасываемое в случае ошибок при выполнении метода
     */
    @RequestMapping(value = "/insurance-service/v2/contract/{id}/attachment",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<AttachedDocRs> getAttachmentList(@PathVariable("id") Long id) throws Exception;



    /**
     * Получить форму самосертификации для проверки на существование 
     * @param contractId Идентификатор экземпляра договора страхования.
     * @param type Id блока страхователя или застрахованного  
     * @return Экземпляр класса {@link ResponseEntity}
     * @throws Exception исключение, выбрасываемое в случае ошибок при выполнении метода
     */
    @RequestMapping(value = "/insurance-service/v2/contract/{contractId}/attachments/certification",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Attachment> getCheckExistenceAttachment(@PathVariable("contractId") Long contractId,@NotNull  @Valid @RequestParam(value = "type") String type) throws Exception;



    /**
     * Получить форму самосертификации для проверки на существование 
     * @param uuid uuid экземпляра договора страхования.
     * @param type Id блока страхователя или застрахованного  
     * @return Экземпляр класса {@link ResponseEntity}
     * @throws Exception исключение, выбрасываемое в случае ошибок при выполнении метода
     */
    @RequestMapping(value = "/insurance-service/v2/contract/temp/{uuid}/attachments/certification",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Attachment> getCheckExistenceTempAttachment(@PathVariable("uuid") String uuid,@NotNull  @Valid @RequestParam(value = "type") String type) throws Exception;



    /**
     * Получить содержимое файла, прикреплённого к обращению клиента 
     * @param requestAttachId Идентификатор файла, прикреплённого к обращению клиента  
     * @return Экземпляр класса {@link ResponseEntity}
     * @throws Exception исключение, выбрасываемое в случае ошибок при выполнении метода
     */
    @RequestMapping(value = "/insurance-service/v2/client-request/{requestAttachId}/attachment",
        produces = { "application/octet-stream" }, 
        method = RequestMethod.GET)
    ResponseEntity<byte[]> getRequestAttachmentContent(@PathVariable("requestAttachId") Long requestAttachId) throws Exception;



    /**
     * Получить список с информацией по всем документам, прикреплённым к обращению клиента. 
     * @param requestId Идентификатор обращения клиента  
     * @return Экземпляр класса {@link ResponseEntity}
     * @throws Exception исключение, выбрасываемое в случае ошибок при выполнении метода
     */
    @RequestMapping(value = "/insurance-service/v2/client-request/temp/{requestId}/attachment",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<AttachedList> getRequestAttachmentList(@PathVariable("requestId") Long requestId) throws Exception;



    /**
     * Получить список заявлений с информацией по всем прикрепленным документам 
     * @param insuranceId ID экземпляра договора страхования.  
     * @return Экземпляр класса {@link ResponseEntity}
     * @throws Exception исключение, выбрасываемое в случае ошибок при выполнении метода
     */
    @RequestMapping(value = "/insurance-service/v2/contract/{insuranceId}/attachments/statements",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<StatementsData> getStatementAttachmentList(@PathVariable("insuranceId") Long insuranceId) throws Exception;



    /**
     * Получить заявление по id 
     * @param statementId ID заявления  
     * @return Экземпляр класса {@link ResponseEntity}
     * @throws Exception исключение, выбрасываемое в случае ошибок при выполнении метода
     */
    @RequestMapping(value = "/insurance-service/v2/contract/attachments/statements/{statementId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Statement> getStatementById(@PathVariable("statementId") Long statementId) throws Exception;



    /**
     * Получить список с информацией по всем прикрепленным документам 
     * @param uuid UUID экземпляра договора страхования.  
     * @return Экземпляр класса {@link ResponseEntity}
     * @throws Exception исключение, выбрасываемое в случае ошибок при выполнении метода
     */
    @RequestMapping(value = "/insurance-service/v2/contract/temp/{uuid}/attachment",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<AttachedDocRs> getTempAttachmentList(@PathVariable("uuid") String uuid) throws Exception;



    /**
     * Добавить признак полного пакета документов для заявления 
     * @param statementId Id заявления.
     * @param statementCompleteStatus Статус заявления:   FULL - Полный набор документов   NOT_FULL - Не полный набор документов   NEUTRAL - Не проверено   
     * @return Экземпляр класса {@link ResponseEntity}
     * @throws Exception исключение, выбрасываемое в случае ошибок при выполнении метода
     */
    @RequestMapping(value = "/insurance-service/v2/contract/attachments/statements/{statementId}/status",
        method = RequestMethod.POST)
    ResponseEntity<Void> setStatementDocumentStatus(@PathVariable("statementId") Long statementId,@NotNull  @Valid @RequestParam(value = "statementCompleteStatus") String statementCompleteStatus) throws Exception;



    /**
     * Загрузить файл, прикреплённый к договору страхования. 
     * @param contractId Идентификатор экземпляра договора страхования
     * @param documentType Идентификатор из справочника обязательных документов
     * @param content Контент  
     * @return Экземпляр класса {@link ResponseEntity}
     * @throws Exception исключение, выбрасываемое в случае ошибок при выполнении метода
     */
    @RequestMapping(value = "/insurance-service/v2/contract/{contractId}/attachment/{documentType}",
        method = RequestMethod.POST)
    ResponseEntity<String> uploadAttachment(@PathVariable("contractId") Long contractId,@PathVariable("documentType") Long documentType,@Valid @RequestPart(value="content", required=false) MultipartFile content) throws Exception;



    /**
     * Загрузить заполненную форму самосертификации, для иностранного налогового резидента. 
     * @param contractId Идентификатор экземпляра договора страхования
     * @param blockId Id блока страхователя или застрахованного
     * @param content Контент  
     * @return Экземпляр класса {@link ResponseEntity}
     * @throws Exception исключение, выбрасываемое в случае ошибок при выполнении метода
     */
    @RequestMapping(value = "/insurance-service/v2/contract/{contractId}/attachment/certification",
        method = RequestMethod.POST)
    ResponseEntity<String> uploadForeignResidentAttachment(@PathVariable("contractId") Long contractId,@NotNull  @Valid @RequestParam(value = "blockId") String blockId,@Valid @RequestPart(value="content", required=false) MultipartFile content) throws Exception;



    /**
     * Загрузить заполненную форму самосертификации, для иностранного налогового резидента. 
     * @param uuid uuid экземпляра договора страхования
     * @param blockId Id блока страхователя или застрахованного
     * @param content Контент  
     * @return Экземпляр класса {@link ResponseEntity}
     * @throws Exception исключение, выбрасываемое в случае ошибок при выполнении метода
     */
    @RequestMapping(value = "/insurance-service/v2/contract/temp/{uuid}/attachment/certification",
        method = RequestMethod.POST)
    ResponseEntity<UuidRs> uploadForeignResidentTempAttachment(@PathVariable("uuid") String uuid,@NotNull  @Valid @RequestParam(value = "blockId") String blockId,@Valid @RequestPart(value="content", required=false) MultipartFile content) throws Exception;



    /**
     * Прикрепить файл к обращению. 
     * @param requestId Идентификатор обращения клиента
     * @param content Прикрепляемый файл  
     * @return Экземпляр класса {@link ResponseEntity}
     * @throws Exception исключение, выбрасываемое в случае ошибок при выполнении метода
     */
    @RequestMapping(value = "/insurance-service/v2/client-request/temp/{requestId}/attachment",
        method = RequestMethod.POST)
    ResponseEntity<AttachedRequestAttachData> uploadRequestAttachment(@PathVariable("requestId") Long requestId,@Valid @RequestPart(value="content", required=false) MultipartFile content) throws Exception;



    /**
     * Прикрепить файл к обращению клиента 
     * @param requestId Идентификатор обращения клиента
     * @param attachment Данные о файле, прикрепляемом к обращению клиента.  
     * @return Экземпляр класса {@link ResponseEntity}
     * @throws Exception исключение, выбрасываемое в случае ошибок при выполнении метода
     */
    @RequestMapping(value = "/insurance-service/v2/client-request/temp/{requestId}/attachment/base64",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<AttachedRequestAttachData> uploadRequestAttachmentBase64(@PathVariable("requestId") Long requestId,@Valid @RequestBody AttachmentData attachment) throws Exception;



    /**
     * Загрузить файл, прикреплённый к заявлению договора страхования. 
     * @param statementId Id заявления.
     * @param documentType Идентификатор типа документа из справочника обязательных документов
     * @param content Контент  
     * @return Экземпляр класса {@link ResponseEntity}
     * @throws Exception исключение, выбрасываемое в случае ошибок при выполнении метода
     */
    @RequestMapping(value = "/insurance-service/v2/contract/attachments/statements/{statementId}/{documentType}",
        method = RequestMethod.POST)
    ResponseEntity<Void> uploadStatementAttachment(@PathVariable("statementId") Long statementId,@PathVariable("documentType") Long documentType,@Valid @RequestPart(value="content", required=false) MultipartFile content) throws Exception;



    /**
     * Загрузить файл, прикреплённый к договору страхования. 
     * @param uuid uuid экземпляра договора страхования
     * @param documentType Идентификатор из справочника обязательных документов
     * @param content Контент  
     * @return Экземпляр класса {@link ResponseEntity}
     * @throws Exception исключение, выбрасываемое в случае ошибок при выполнении метода
     */
    @RequestMapping(value = "/insurance-service/v2/contract/temp/{uuid}/attachment/{documentType}",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<UuidRs> uploadTempAttachment(@PathVariable("uuid") String uuid,@PathVariable("documentType") Long documentType,@Valid @RequestPart(value="content", required=false) MultipartFile content) throws Exception;


}
