/**
 * NOTE: This class is auto generated by the swagger code generator program (2.3.1).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package ru.softlab.efr.services.insurance.controllers;

import ru.softlab.efr.services.insurance.model.rest.ClientRequestInfo;
import ru.softlab.efr.services.insurance.model.rest.ClientRequestInfoForAdmin;
import ru.softlab.efr.services.insurance.model.rest.ClientRequestRq;
import ru.softlab.efr.services.insurance.model.rest.ErrorModel;
import ru.softlab.efr.services.insurance.model.rest.FilterRequestsRq;
import ru.softlab.efr.services.insurance.model.rest.ProcessingClientRequestRq;
import ru.softlab.efr.services.insurance.model.rest.UserRequestResponse;

import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.validation.BindingResult;
import org.springframework.data.web.PageableDefault;
import org.springframework.data.domain.*;

import java.util.*;

import org.springframework.validation.annotation.Validated;
import javax.validation.constraints.*;
import javax.validation.Valid;

/**
 * the Request API
 */
public interface RequestApi {

    /**
     * Создать обращение клиента от имени текущего авторизованного клиента 
     * @param createClientRequest Запрос создания обращения  
     * @return Экземпляр класса {@link ResponseEntity}
     * @throws Exception исключение, выбрасываемое в случае ошибок при выполнении метода
     */
    @RequestMapping(value = "/insurance-service/v2/client-request",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<ClientRequestInfo> addRequest(@Valid @RequestBody ClientRequestRq createClientRequest) throws Exception;



    /**
     * Закрыть обращение клиента 
     * @param requestId Идентификатор обращения клиента  
     * @return Экземпляр класса {@link ResponseEntity}
     * @throws Exception исключение, выбрасываемое в случае ошибок при выполнении метода
     */
    @RequestMapping(value = "/insurance-service/v2/client-request/{requestId}/close",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<String> closeRequest(@PathVariable("requestId") Long requestId) throws Exception;



    /**
     * Получить список обращений для текущего авторизованного клиента   
     * @param pageable параметры пагинации 
     * @return Экземпляр класса {@link ResponseEntity}
     * @throws Exception исключение, выбрасываемое в случае ошибок при выполнении метода
     */
    @RequestMapping(value = "/insurance-service/v2/client-request",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Page<UserRequestResponse>> getClientRequestList(@PageableDefault(value = 50) Pageable pageable) throws Exception;



    /**
     * Получить обращение для пользователя по id 
     * @param requestId Идентификатор обращения клиента  
     * @return Экземпляр класса {@link ResponseEntity}
     * @throws Exception исключение, выбрасываемое в случае ошибок при выполнении метода
     */
    @RequestMapping(value = "/insurance-service/v2/client-request/{requestId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<ClientRequestInfo> getRequestById(@PathVariable("requestId") Long requestId) throws Exception;



    /**
     * Получить экземпляр обращения клиента по идентификатору 
     * @param requestId Идентификатор обращения клиента.  
     * @return Экземпляр класса {@link ResponseEntity}
     * @throws Exception исключение, выбрасываемое в случае ошибок при выполнении метода
     */
    @RequestMapping(value = "/insurance-service/v2/client-request/{requestId}/get",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<ClientRequestInfoForAdmin> getRequestByIdForAdmin(@PathVariable("requestId") Long requestId) throws Exception;



    /**
     * Получить список всех экземпляров обращений клиентов (с фильтрацией) для админа. 
     * @param filterData Тело запроса с данными фильтрации
     * @param hasFilter Признак фильтрации обращений  
     * @param pageable параметры пагинации 
     * @return Экземпляр класса {@link ResponseEntity}
     * @throws Exception исключение, выбрасываемое в случае ошибок при выполнении метода
     */
    @RequestMapping(value = "/insurance-service/v2/client-request",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Page<ClientRequestInfoForAdmin>> getRequestPaginatedList(@PageableDefault(value = 50) Pageable pageable, @Valid @RequestBody FilterRequestsRq filterData, @Valid @RequestParam(value = "hasFilter", required = false) Boolean hasFilter) throws Exception;



    /**
     * Обработать обращение клиента 
     * @param requestId Идентификатор обращения клиента
     * @param body Запрос на обработку обращения  
     * @return Экземпляр класса {@link ResponseEntity}
     * @throws Exception исключение, выбрасываемое в случае ошибок при выполнении метода
     */
    @RequestMapping(value = "/insurance-service/v2/client-request/{requestId}/processing",
        method = RequestMethod.POST)
    ResponseEntity<Void> processingClientRequest(@PathVariable("requestId") Long requestId,@Valid @RequestBody ProcessingClientRequestRq body) throws Exception;


}
