/**
 * NOTE: This class is auto generated by the swagger code generator program (2.3.1).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package ru.softlab.efr.services.insurance.controllers;

import ru.softlab.efr.services.insurance.model.rest.CreateUserTemplateResponse;
import ru.softlab.efr.services.insurance.model.rest.ErrorModel;
import ru.softlab.efr.services.insurance.model.rest.UserTemplateData;

import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.validation.BindingResult;
import org.springframework.data.web.PageableDefault;
import org.springframework.data.domain.*;

import java.util.*;

import org.springframework.validation.annotation.Validated;
import javax.validation.constraints.*;
import javax.validation.Valid;

/**
 * the UserTemplates API
 */
public interface UserTemplatesApi {

    /**
     * Создать запись в справочнике пользовательских шаблонов документов 
     * @param createUserTemplateRq Запрос создания записи в справочнике пользовательских шаблонов документов  
     * @return Экземпляр класса {@link ResponseEntity}
     * @throws Exception исключение, выбрасываемое в случае ошибок при выполнении метода
     */
    @RequestMapping(value = "/insurance-service/v1/user-templates",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<CreateUserTemplateResponse> createUserTemplate(@Valid @RequestBody UserTemplateData createUserTemplateRq) throws Exception;



    /**
     * Удалить сущность пользовательского шаблона документов 
     * @param id Идентификатор сущности пользовательского шаблона документов  
     * @return Экземпляр класса {@link ResponseEntity}
     * @throws Exception исключение, выбрасываемое в случае ошибок при выполнении метода
     */
    @RequestMapping(value = "/insurance-service/v1/user-templates/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteUserTemplate(@PathVariable("id") Long id) throws Exception;



    /**
     * Получить сущность пользовательского шаблона документов 
     * @param id Идентификатор сущности пользовательского шаблона документов  
     * @return Экземпляр класса {@link ResponseEntity}
     * @throws Exception исключение, выбрасываемое в случае ошибок при выполнении метода
     */
    @RequestMapping(value = "/insurance-service/v1/user-templates/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<UserTemplateData> getUserTemplateById(@PathVariable("id") Long id) throws Exception;



    /**
     * Получить контент документа 
     * @param id Идентификатор сущности пользовательского шаблона документов  
     * @return Экземпляр класса {@link ResponseEntity}
     * @throws Exception исключение, выбрасываемое в случае ошибок при выполнении метода
     */
    @RequestMapping(value = "/insurance-service/v1/user-templates/{id}/content",
        produces = { "application/octet-stream" }, 
        method = RequestMethod.GET)
    ResponseEntity<byte[]> getUserTemplateContent(@PathVariable("id") Long id) throws Exception;



    /**
     * Получить список пользовательских шаблонов документов (ТЗ, п.1.2)   
     * @param pageable параметры пагинации 
     * @return Экземпляр класса {@link ResponseEntity}
     * @throws Exception исключение, выбрасываемое в случае ошибок при выполнении метода
     */
    @RequestMapping(value = "/insurance-service/v1/user-templates",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Page<UserTemplateData>> getUserTemplateList(@PageableDefault(value = 50) Pageable pageable) throws Exception;



    /**
     * Обновить сущность пользовательского шаблона документов 
     * @param id Идентификатор сущности пользовательского шаблона документов
     * @param updateUserTemplateRequest Запрос обновления сущности пользовательского шаблона документов  
     * @return Экземпляр класса {@link ResponseEntity}
     * @throws Exception исключение, выбрасываемое в случае ошибок при выполнении метода
     */
    @RequestMapping(value = "/insurance-service/v1/user-templates/{id}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> updateUserTemplate(@PathVariable("id") Long id,@Valid @RequestBody UserTemplateData updateUserTemplateRequest) throws Exception;


}
