/**
 * NOTE: This class is auto generated by the swagger code generator program (2.3.1).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package ru.softlab.efr.services.insurance.controllers;

import ru.softlab.efr.services.insurance.model.rest.CreateProgramSettingRs;
import ru.softlab.efr.services.insurance.model.rest.ErrorModel;
import ru.softlab.efr.services.insurance.model.rest.FilterProgramSettingsRq;
import ru.softlab.efr.services.insurance.model.rest.FindProgramSettingRq;
import ru.softlab.efr.services.insurance.model.rest.FindProgramSettingRs;
import ru.softlab.efr.services.insurance.model.rest.ProgramSettingData;
import ru.softlab.efr.services.insurance.model.rest.ProgramSettingDataForList;

import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.validation.BindingResult;
import org.springframework.data.web.PageableDefault;
import org.springframework.data.domain.*;

import java.util.*;

import org.springframework.validation.annotation.Validated;
import javax.validation.constraints.*;
import javax.validation.Valid;

/**
 * the ProgramSetting API
 */
public interface ProgramSettingApi {

    /**
     * Создать запись в справочнике параметров программ страхования. 
     * @param createProgramSettingRq Запрос создания записи в справочнике параметров программ страхования.  
     * @return Экземпляр класса {@link ResponseEntity}
     * @throws Exception исключение, выбрасываемое в случае ошибок при выполнении метода
     */
    @RequestMapping(value = "/insurance-service/v1/dict/program-settings",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<CreateProgramSettingRs> createProgramSetting(@Valid @RequestBody ProgramSettingData createProgramSettingRq) throws Exception;



    /**
     * Удалить набор параметров программы страхования. 
     * @param id Идентификатор набора параметров программы страхования.  
     * @return Экземпляр класса {@link ResponseEntity}
     * @throws Exception исключение, выбрасываемое в случае ошибок при выполнении метода
     */
    @RequestMapping(value = "/insurance-service/v1/dict/program-settings/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteProgramSetting(@PathVariable("id") Long id) throws Exception;



    /**
     * Искать запись в справочнике параметров программ страхования. 
     * @param findProgramSettingRq Запрос поиска записи в справочнике параметров программ страхования.  
     * @return Экземпляр класса {@link ResponseEntity}
     * @throws Exception исключение, выбрасываемое в случае ошибок при выполнении метода
     */
    @RequestMapping(value = "/insurance-service/v1/dict/find/program-settings",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<FindProgramSettingRs> findProgramSetting(@Valid @RequestBody FindProgramSettingRq findProgramSettingRq) throws Exception;



    /**
     * Получить набор параметров программы страхования. 
     * @param id Идентификатор набора параметров программы страхования.  
     * @return Экземпляр класса {@link ResponseEntity}
     * @throws Exception исключение, выбрасываемое в случае ошибок при выполнении метода
     */
    @RequestMapping(value = "/insurance-service/v1/dict/program-settings/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<ProgramSettingData> getProgramSettingById(@PathVariable("id") Long id) throws Exception;



    /**
     * Получить список параметров программ страхования. 
     * @param filterData Тело запроса с данными фильтрации
     * @param hasFilter Признак фильтрации параметров программ страхования  
     * @param pageable параметры пагинации 
     * @return Экземпляр класса {@link ResponseEntity}
     * @throws Exception исключение, выбрасываемое в случае ошибок при выполнении метода
     */
    @RequestMapping(value = "/insurance-service/v1/dict/program-settings",
        produces = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<Page<ProgramSettingDataForList>> getProgramSettingList(@PageableDefault(value = 50) Pageable pageable, @Valid @RequestBody FilterProgramSettingsRq filterData, @Valid @RequestParam(value = "hasFilter", required = false) Boolean hasFilter) throws Exception;



    /**
     * Обновить набор параметров программы страхования. 
     * @param id Идентификатор набора параметров программы страхования.
     * @param updateProgramRequest Запрос обновления набора параметров программы страхования.  
     * @return Экземпляр класса {@link ResponseEntity}
     * @throws Exception исключение, выбрасываемое в случае ошибок при выполнении метода
     */
    @RequestMapping(value = "/insurance-service/v1/dict/program-settings/{id}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> updateProgramSetting(@PathVariable("id") Long id,@Valid @RequestBody ProgramSettingData updateProgramRequest) throws Exception;


}
