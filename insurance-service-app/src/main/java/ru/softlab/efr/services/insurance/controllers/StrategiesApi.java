/**
 * NOTE: This class is auto generated by the swagger code generator program (2.3.1).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package ru.softlab.efr.services.insurance.controllers;

import java.math.BigDecimal;
import ru.softlab.efr.services.insurance.model.rest.StrategyData;

import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.validation.BindingResult;
import org.springframework.data.web.PageableDefault;
import org.springframework.data.domain.*;

import java.util.*;

import org.springframework.validation.annotation.Validated;
import javax.validation.constraints.*;
import javax.validation.Valid;

/**
 * the Strategies API
 */
public interface StrategiesApi {

    /**
     * Создать запись справочника стратегий 
     * @param createStrategyRq Запрос создания записи в справочнике стратегий.  
     * @return Экземпляр класса {@link ResponseEntity}
     * @throws Exception исключение, выбрасываемое в случае ошибок при выполнении метода
     */
    @RequestMapping(value = "/insurance-service/v1/dict/strategy",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<StrategyData> createStrategy(@Valid @RequestBody StrategyData createStrategyRq) throws Exception;



    /**
     * Удалить запись справочника стратегий по идентификатору 
     * @param id Идентификатор записи в справочнике стратегий.  
     * @return Экземпляр класса {@link ResponseEntity}
     * @throws Exception исключение, выбрасываемое в случае ошибок при выполнении метода
     */
    @RequestMapping(value = "/insurance-service/v1/dict/strategy/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteStrategy(@PathVariable("id") Long id) throws Exception;



    /**
     * Получить запись справочника стратегий по идентификатору 
     * @param id Идентификатор записи в справочнике стратегий.  
     * @return Экземпляр класса {@link ResponseEntity}
     * @throws Exception исключение, выбрасываемое в случае ошибок при выполнении метода
     */
    @RequestMapping(value = "/insurance-service/v1/dict/strategy/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<StrategyData> getStrategyById(@PathVariable("id") Long id) throws Exception;



    /**
     * Получить список всех записей справочника стратегий.   
     * @param pageable параметры пагинации 
     * @return Экземпляр класса {@link ResponseEntity}
     * @throws Exception исключение, выбрасываемое в случае ошибок при выполнении метода
     */
    @RequestMapping(value = "/insurance-service/v1/dict/strategies",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Page<StrategyData>> getStrategyList(@PageableDefault(value = 50) Pageable pageable) throws Exception;



    /**
     * Получить список записей справочника стратегий по коэффициенту участия. 
     * @param coefficient Коэффициент участия  
     * @return Экземпляр класса {@link ResponseEntity}
     * @throws Exception исключение, выбрасываемое в случае ошибок при выполнении метода
     */
    @RequestMapping(value = "/insurance-service/v1/dict/strategies",
        produces = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<List<StrategyData>> getStrategyListByRate(@NotNull  @Valid @RequestParam(value = "coefficient") BigDecimal coefficient) throws Exception;



    /**
     * Обновить запись справочника стратегий по идентификатору 
     * @param id Идентификатор записи в справочнике стратегий.
     * @param updateStrategyRq Запрос обновления записи в справочнике стратегий.  
     * @return Экземпляр класса {@link ResponseEntity}
     * @throws Exception исключение, выбрасываемое в случае ошибок при выполнении метода
     */
    @RequestMapping(value = "/insurance-service/v1/dict/strategy/{id}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<StrategyData> updateStrategyById(@PathVariable("id") Long id,@Valid @RequestBody StrategyData updateStrategyRq) throws Exception;


}
