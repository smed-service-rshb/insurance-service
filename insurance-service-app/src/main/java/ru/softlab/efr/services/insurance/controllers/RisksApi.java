/**
 * NOTE: This class is auto generated by the swagger code generator program (2.3.1).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package ru.softlab.efr.services.insurance.controllers;

import ru.softlab.efr.services.insurance.model.rest.ErrorModel;
import ru.softlab.efr.services.insurance.model.rest.RiskData;

import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.validation.BindingResult;
import org.springframework.data.web.PageableDefault;
import org.springframework.data.domain.*;

import java.util.*;

import org.springframework.validation.annotation.Validated;
import javax.validation.constraints.*;
import javax.validation.Valid;

/**
 * the Risks API
 */
public interface RisksApi {

    /**
     * Создать запись в справочнике рисков. 
     * @param createRiskRq Запрос создания записи в справочнике рисков.  
     * @return Экземпляр класса {@link ResponseEntity}
     * @throws Exception исключение, выбрасываемое в случае ошибок при выполнении метода
     */
    @RequestMapping(value = "/insurance-service/v1/dict/risks",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> createRisk(@Valid @RequestBody RiskData createRiskRq) throws Exception;



    /**
     * Получить запись из справочника рисков. 
     * @param id Идентификатор записи в справочнике рисков.  
     * @return Экземпляр класса {@link ResponseEntity}
     * @throws Exception исключение, выбрасываемое в случае ошибок при выполнении метода
     */
    @RequestMapping(value = "/insurance-service/v1/dict/risks/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<RiskData> getRisk(@PathVariable("id") Long id) throws Exception;



    /**
     * Обновить запись в справочнике рисков. 
     * @param id Идентификатор записи в справочнике рисков.
     * @param updateRiskRq Запрос обновления записи риска.  
     * @return Экземпляр класса {@link ResponseEntity}
     * @throws Exception исключение, выбрасываемое в случае ошибок при выполнении метода
     */
    @RequestMapping(value = "/insurance-service/v1/dict/risks/{id}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> putRisk(@PathVariable("id") Long id,@Valid @RequestBody RiskData updateRiskRq) throws Exception;



    /**
     * Получить список всех записей справочника рисков.   
     * @param pageable параметры пагинации 
     * @return Экземпляр класса {@link ResponseEntity}
     * @throws Exception исключение, выбрасываемое в случае ошибок при выполнении метода
     */
    @RequestMapping(value = "/insurance-service/v1/dict/risks",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Page<RiskData>> riskList(@PageableDefault(value = 50) Pageable pageable) throws Exception;


}
