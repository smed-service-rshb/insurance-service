/**
 * NOTE: This class is auto generated by the swagger code generator program (2.3.1).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package ru.softlab.efr.services.insurance.controllers;

import ru.softlab.efr.services.insurance.model.rest.AcquiringFindByCodeRq;
import ru.softlab.efr.services.insurance.model.rest.AcquiringInsuranceRq;
import ru.softlab.efr.services.insurance.model.rest.AcquiringInsuranceRs;
import ru.softlab.efr.services.insurance.model.rest.AcquiringPaymentInfoRs;
import ru.softlab.efr.services.insurance.model.rest.AvailableProgramsRs;
import ru.softlab.efr.services.insurance.model.rest.ErrorModel;

import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.validation.BindingResult;
import org.springframework.data.web.PageableDefault;
import org.springframework.data.domain.*;

import java.util.*;

import org.springframework.validation.annotation.Validated;
import javax.validation.constraints.*;
import javax.validation.Valid;

/**
 * the AcquiringContract API
 */
public interface AcquiringContractApi {

    /**
     * Найти информацию о договоре по коду, для оплаты в ЛК 
     * @param body Запрос на получение информации о договоре по коду  
     * @return Экземпляр класса {@link ResponseEntity}
     * @throws Exception исключение, выбрасываемое в случае ошибок при выполнении метода
     */
    @RequestMapping(value = "/insurance-service/public/v2/contract/acquiring/findByCode",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<AcquiringInsuranceRs> acquiringFindByCode(@Valid @RequestBody AcquiringFindByCodeRq body) throws Exception;



    /**
     * Получение информации по оформлению договора через ЛК 
     * @param uuid Строковый идентификатор процесса оформления договора  
     * @return Экземпляр класса {@link ResponseEntity}
     * @throws Exception исключение, выбрасываемое в случае ошибок при выполнении метода
     */
    @RequestMapping(value = "/insurance-service/public/v2/contract/acquiring/info/{uuid}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<AcquiringInsuranceRs> acquiringInfo(@PathVariable("uuid") String uuid) throws Exception;



    /**
     * Получение информации об оплате договора, оформленного через ЛК 
     * @param orderId Идентификатор экземпляра заказа на оплату договора страхования  
     * @return Экземпляр класса {@link ResponseEntity}
     * @throws Exception исключение, выбрасываемое в случае ошибок при выполнении метода
     */
    @RequestMapping(value = "/insurance-service/public/v2/contract/acquiring/info/{orderId}/order",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<AcquiringPaymentInfoRs> acquiringPaymentInfo(@PathVariable("orderId") Long orderId) throws Exception;



    /**
     * Выполнить проверку возможности оформления договора КСП для клиента 
     * @param clientId Идентификатор клиента  
     * @return Экземпляр класса {@link ResponseEntity}
     * @throws Exception исключение, выбрасываемое в случае ошибок при выполнении метода
     */
    @RequestMapping(value = "/insurance-service/public/v2/contract/acquiring/check/ksp/client/{clientId}",
        method = RequestMethod.POST)
    ResponseEntity<Void> checkExistKsp(@PathVariable("clientId") Long clientId) throws Exception;



    /**
     * Получить список доступных для оформления клиентом программ страхования   
     * @return Экземпляр класса {@link ResponseEntity}
     * @throws Exception исключение, выбрасываемое в случае ошибок при выполнении метода
     */
    @RequestMapping(value = "/insurance-service/public/v2/contract/acquiring/programs",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<AvailableProgramsRs> getAvailableProgram() throws Exception;



    /**
     * Создание договора клиентом 
     * @param request Запрос на оформление договора для покупки  
     * @return Экземпляр класса {@link ResponseEntity}
     * @throws Exception исключение, выбрасываемое в случае ошибок при выполнении метода
     */
    @RequestMapping(value = "/insurance-service/public/v2/contract/acquiring/issue",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<AcquiringInsuranceRs> issueInsurance(@Valid @RequestBody AcquiringInsuranceRq request) throws Exception;



    /**
     * Проверка возможности оформления договора клиентом 
     * @param request Запрос на создание договора для покупки  
     * @return Экземпляр класса {@link ResponseEntity}
     * @throws Exception исключение, выбрасываемое в случае ошибок при выполнении метода
     */
    @RequestMapping(value = "/insurance-service/public/v2/contract/acquiring/registration",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<AcquiringInsuranceRs> registrationAcquiring(@Valid @RequestBody AcquiringInsuranceRq request) throws Exception;


}
