/**
 * NOTE: This class is auto generated by the swagger code generator program (2.3.1).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package ru.softlab.efr.services.insurance.controllers;

import ru.softlab.efr.services.insurance.model.rest.CheckClientRq;
import ru.softlab.efr.services.insurance.model.rest.Client;
import ru.softlab.efr.services.insurance.model.rest.ClientInspectionResults;
import ru.softlab.efr.services.insurance.model.rest.DataChangeHistoryClient;
import ru.softlab.efr.services.insurance.model.rest.ErrorModel;
import ru.softlab.efr.services.insurance.model.rest.FindClientRq;
import ru.softlab.efr.services.insurance.model.rest.ListClientsResponse;
import java.time.LocalDate;
import org.springframework.core.io.Resource;
import ru.softlab.efr.services.insurance.model.rest.ShortClientData;

import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.validation.BindingResult;
import org.springframework.data.web.PageableDefault;
import org.springframework.data.domain.*;

import java.util.*;

import org.springframework.validation.annotation.Validated;
import javax.validation.constraints.*;
import javax.validation.Valid;

/**
 * the ClientsData API
 */
public interface ClientsDataApi {

    /**
     * Запустить процесс проверки всех клиентов по справочникам 
     * @param dictName Справочник, по которому необходимо инициировать проверку
     * @param updateId Идентификатор записи, которая содержит информацию о файле-справочнике  
     * @return Экземпляр класса {@link ResponseEntity}
     * @throws Exception исключение, выбрасываемое в случае ошибок при выполнении метода
     */
    @RequestMapping(value = "/insurance-service/v2/clients/check/{updateId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Void> checkAllClients(@NotNull  @Valid @RequestParam(value = "dictName") String dictName,@PathVariable("updateId") String updateId) throws Exception;



    /**
     * Список клиентов 
     * @param surName Фамилия клиента
     * @param firstName Имя клиента
     * @param middleName Отчество клиента
     * @param birthDate Дата рождения
     * @param phoneNumber Номер телефона  
     * @return Экземпляр класса {@link ResponseEntity}
     * @throws Exception исключение, выбрасываемое в случае ошибок при выполнении метода
     */
    @RequestMapping(value = "/insurance-service/v2/clients/search",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<ListClientsResponse> clientsSearch( @Valid @RequestParam(value = "surName", required = false) String surName, @Valid @RequestParam(value = "firstName", required = false) String firstName, @Valid @RequestParam(value = "middleName", required = false) String middleName, @Valid @RequestParam(value = "birthDate", required = false) LocalDate birthDate, @Valid @RequestParam(value = "phoneNumber", required = false) String phoneNumber) throws Exception;



    /**
     * Поиск клиента при оформлении договора 
     * @param findClientRq Запрос поиска клинта при оформлениии договора  
     * @return Экземпляр класса {@link ResponseEntity}
     * @throws Exception исключение, выбрасываемое в случае ошибок при выполнении метода
     */
    @RequestMapping(value = "/insurance-service/v2/clients/find",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Client> findClient(@Valid @RequestBody FindClientRq findClientRq) throws Exception;



    /**
     * Возвращает информацию о клиенте 
     * @param clientId Идентификатор клиента в системе  
     * @return Экземпляр класса {@link ResponseEntity}
     * @throws Exception исключение, выбрасываемое в случае ошибок при выполнении метода
     */
    @RequestMapping(value = "/insurance-service/v2/clients/{clientId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Client> getClient(@PathVariable("clientId") String clientId) throws Exception;



    /**
     * Вернуть информацию об истории изменения данных пользователя 
     * @param clientId Идентификатор клиента в системе  
     * @return Экземпляр класса {@link ResponseEntity}
     * @throws Exception исключение, выбрасываемое в случае ошибок при выполнении метода
     */
    @RequestMapping(value = "/insurance-service/v2/clients/{clientId}/historyChanges",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<DataChangeHistoryClient> getClientHistoryChanges(@PathVariable("clientId") Long clientId) throws Exception;



    /**
     * Возвращает информацию о клиенте   
     * @return Экземпляр класса {@link ResponseEntity}
     * @throws Exception исключение, выбрасываемое в случае ошибок при выполнении метода
     */
    @RequestMapping(value = "/insurance-service/v2/consumer",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Client> getConsumer() throws Exception;



    /**
     * Возвращает информацию о последних проверках клиента 
     * @param clientId Идентификатор клиента в системе  
     * @return Экземпляр класса {@link ResponseEntity}
     * @throws Exception исключение, выбрасываемое в случае ошибок при выполнении метода
     */
    @RequestMapping(value = "/insurance-service/v2/clients/{clientId}/inspectionResults",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<ClientInspectionResults> getInspectionResults(@PathVariable("clientId") String clientId) throws Exception;



    /**
     * Список клиентов 
     * @param surName Фамилия клиента
     * @param firstName Имя клиента
     * @param middleName Отчество клиента
     * @param birthDate Дата рождения
     * @param docType Тип документа
     * @param docSeries Серия документа
     * @param docNumber Номер документа
     * @param phoneNumber Номер телефона
     * @param email email
     * @param startConclusionDate Начальная дата периода оформления договора
     * @param endConclusionDate Конечная дата периода оформления договора
     * @param startCheckDate Начальная дата периода выполнения проверки
     * @param endCheckDate Конечная дата периода выполнения проверки
     * @param type Вид проверки  
     * @return Экземпляр класса {@link ResponseEntity}
     * @throws Exception исключение, выбрасываемое в случае ошибок при выполнении метода
     */
    @RequestMapping(value = "/insurance-service/v2/clients",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<ListClientsResponse> listClients( @Valid @RequestParam(value = "surName", required = false) String surName, @Valid @RequestParam(value = "firstName", required = false) String firstName, @Valid @RequestParam(value = "middleName", required = false) String middleName, @Valid @RequestParam(value = "birthDate", required = false) LocalDate birthDate, @Valid @RequestParam(value = "docType", required = false) String docType, @Valid @RequestParam(value = "docSeries", required = false) String docSeries, @Valid @RequestParam(value = "docNumber", required = false) String docNumber, @Valid @RequestParam(value = "phoneNumber", required = false) String phoneNumber, @Valid @RequestParam(value = "email", required = false) String email, @Valid @RequestParam(value = "startConclusionDate", required = false) LocalDate startConclusionDate, @Valid @RequestParam(value = "endConclusionDate", required = false) LocalDate endConclusionDate, @Valid @RequestParam(value = "startCheckDate", required = false) LocalDate startCheckDate, @Valid @RequestParam(value = "endCheckDate", required = false) LocalDate endCheckDate, @Valid @RequestParam(value = "type", required = false) String type) throws Exception;



    /**
     * Запуск ручной проверки клиентов 
     * @param checkClientData Данные для проверки клиентов  
     * @return Экземпляр класса {@link ResponseEntity}
     * @throws Exception исключение, выбрасываемое в случае ошибок при выполнении метода
     */
    @RequestMapping(value = "/insurance-service/v2/clients/check",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> manualCheckClient(@Valid @RequestBody CheckClientRq checkClientData) throws Exception;



    /**
     * Обновить информацию о клиенте 
     * @param clientId Идентификатор клиента в системе
     * @param updateClientInfo Данные обновления информации о клиенте.  
     * @return Экземпляр класса {@link ResponseEntity}
     * @throws Exception исключение, выбрасываемое в случае ошибок при выполнении метода
     */
    @RequestMapping(value = "/insurance-service/v2/clients/{clientId}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> putClient(@PathVariable("clientId") Long clientId,@Valid @RequestBody Client updateClientInfo) throws Exception;



    /**
     * Сохраняет только обязательные поля данных клиента 
     * @param shortClientData Данные клиента которые необходимо сохранить  
     * @return Экземпляр класса {@link ResponseEntity}
     * @throws Exception исключение, выбрасываемое в случае ошибок при выполнении метода
     */
    @RequestMapping(value = "/insurance-service/v2/clients/saveShortClientData",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Long> saveClientDataWithRequiredFields(@Valid @RequestBody ShortClientData shortClientData) throws Exception;



    /**
     * Получить word файл с выгрузкой одного клиента 
     * @param clientId Идентификатор клиента в системе  
     * @return Экземпляр класса {@link ResponseEntity}
     * @throws Exception исключение, выбрасываемое в случае ошибок при выполнении метода
     */
    @RequestMapping(value = "/insurance-service/v2/clients/{clientId}/unload/word",
        produces = { "application/vnd.openxmlformats-officedocument.wordprocessingml.document" }, 
        method = RequestMethod.GET)
    ResponseEntity<Resource> unloadClientWord(@PathVariable("clientId") Integer clientId) throws Exception;



    /**
     * Получить xml файл с выгрузкой одного клиента 
     * @param clientId Идентификатор клиента в системе  
     * @return Экземпляр класса {@link ResponseEntity}
     * @throws Exception исключение, выбрасываемое в случае ошибок при выполнении метода
     */
    @RequestMapping(value = "/insurance-service/v2/clients/{clientId}/unload/xml",
        produces = { "application/xml", "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<byte[]> unloadClientXml(@PathVariable("clientId") String clientId) throws Exception;



    /**
     * Получить xml файл с выгрузкой списка клиентов, удовлетворяющих определённым условиям 
     * @param contractIds Список идентификаторов договоров, для которых необходимо выгрузить клиентов  
     * @return Экземпляр класса {@link ResponseEntity}
     * @throws Exception исключение, выбрасываемое в случае ошибок при выполнении метода
     */
    @RequestMapping(value = "/insurance-service/v2/clients/unload/xml",
        produces = { "application/xml", "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<byte[]> unloadClientsXmlByCriteria( @Valid @RequestParam(value = "contractIds", required = false) List<Long> contractIds) throws Exception;



    /**
     * Обновить признак согласия у клиента 
     * @param id Идентификатор записи справочника
     * @param workflowAgreements комментарий к заявлению  
     * @return Экземпляр класса {@link ResponseEntity}
     * @throws Exception исключение, выбрасываемое в случае ошибок при выполнении метода
     */
    @RequestMapping(value = "/insurance-service/v1/client/{id}/workflow-agreements",
        produces = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<Void> updateClientWorkflow(@PathVariable("id") Long id,@NotNull  @Valid @RequestParam(value = "workflowAgreements") Boolean workflowAgreements) throws Exception;


}
