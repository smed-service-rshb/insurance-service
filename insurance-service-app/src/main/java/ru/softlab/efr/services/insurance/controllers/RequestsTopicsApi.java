/**
 * NOTE: This class is auto generated by the swagger code generator program (2.3.1).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package ru.softlab.efr.services.insurance.controllers;

import ru.softlab.efr.services.insurance.model.rest.AvailableTopicFormat;
import ru.softlab.efr.services.insurance.model.rest.AvailableTopics;
import ru.softlab.efr.services.insurance.model.rest.BaseTopicsModel;
import ru.softlab.efr.services.insurance.model.rest.ErrorModel;

import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.validation.BindingResult;
import org.springframework.data.web.PageableDefault;
import org.springframework.data.domain.*;

import java.util.*;

import org.springframework.validation.annotation.Validated;
import javax.validation.constraints.*;
import javax.validation.Valid;

/**
 * the RequestsTopics API
 */
public interface RequestsTopicsApi {

    /**
     * Получить доступные темы   
     * @return Экземпляр класса {@link ResponseEntity}
     * @throws Exception исключение, выбрасываемое в случае ошибок при выполнении метода
     */
    @RequestMapping(value = "/insurance-service/v2/client-request-topic",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<AvailableTopics> available() throws Exception;



    /**
     * Получить тему по идентификатору 
     * @param topicId Идентификатор темы.  
     * @return Экземпляр класса {@link ResponseEntity}
     * @throws Exception исключение, выбрасываемое в случае ошибок при выполнении метода
     */
    @RequestMapping(value = "/insurance-service/v2/client-request-topic/{topicId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<BaseTopicsModel> availableById(@PathVariable("topicId") Long topicId) throws Exception;



    /**
     * Получить доступные темы с пагинацией   
     * @param pageable параметры пагинации 
     * @return Экземпляр класса {@link ResponseEntity}
     * @throws Exception исключение, выбрасываемое в случае ошибок при выполнении метода
     */
    @RequestMapping(value = "/insurance-service/v2/admin-request-topic",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Page<AvailableTopicFormat>> availablePaginated(@PageableDefault(value = 50) Pageable pageable) throws Exception;



    /**
     * Добавление либо редактирование темы 
     * @param updateTopicRequest Запрос обновления либо добавления экземпляра темы  
     * @return Экземпляр класса {@link ResponseEntity}
     * @throws Exception исключение, выбрасываемое в случае ошибок при выполнении метода
     */
    @RequestMapping(value = "/insurance-service/v2/client-request-topic",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<String> availableSet(@Valid @RequestBody BaseTopicsModel updateTopicRequest) throws Exception;


}
