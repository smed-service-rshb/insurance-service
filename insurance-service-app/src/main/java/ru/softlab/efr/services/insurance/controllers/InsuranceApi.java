/**
 * NOTE: This class is auto generated by the swagger code generator program (2.3.1).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package ru.softlab.efr.services.insurance.controllers;

import ru.softlab.efr.services.insurance.model.rest.BaseInsuranceModel;
import ru.softlab.efr.services.insurance.model.rest.CreateInsuranceResponse;
import ru.softlab.efr.services.insurance.model.rest.ErrorModel;
import ru.softlab.efr.services.insurance.model.rest.ExtractStatusRs;
import ru.softlab.efr.services.insurance.model.rest.FilterContractsRq;
import ru.softlab.efr.services.insurance.model.rest.FoundMultipleClients;
import ru.softlab.efr.services.insurance.model.rest.FullSetDocumentData;
import ru.softlab.efr.services.insurance.model.rest.IndividualRateRq;
import ru.softlab.efr.services.insurance.model.rest.ListInsuranceModel;
import java.time.LocalDate;
import org.springframework.core.io.Resource;
import ru.softlab.efr.services.insurance.model.rest.SetStatusInsuranceModel;
import ru.softlab.efr.services.insurance.model.rest.UuidRs;
import ru.softlab.efr.services.insurance.model.rest.ViewInsuranceModel;

import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.validation.BindingResult;
import org.springframework.data.web.PageableDefault;
import org.springframework.data.domain.*;

import java.util.*;

import org.springframework.validation.annotation.Validated;
import javax.validation.constraints.*;
import javax.validation.Valid;

/**
 * the Insurance API
 */
public interface InsuranceApi {

    /**
     * Создать экземпляр договора страхования. 
     * @param createContractRequest Запрос создания экземпляра договора страхования  
     * @return Экземпляр класса {@link ResponseEntity}
     * @throws Exception исключение, выбрасываемое в случае ошибок при выполнении метода
     */
    @RequestMapping(value = "/insurance-service/v2/contracts",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<CreateInsuranceResponse> createContractV2(@Valid @RequestBody BaseInsuranceModel createContractRequest) throws Exception;



    /**
     * Удалить экземпляр договора страхования. 
     * @param id Идентификатор экземпляра договора страхования  
     * @return Экземпляр класса {@link ResponseEntity}
     * @throws Exception исключение, выбрасываемое в случае ошибок при выполнении метода
     */
    @RequestMapping(value = "/insurance-service/v2/contracts/{id}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteContractV2(@PathVariable("id") Long id) throws Exception;



    /**
     * Вернуть признак наличия оформленного договора страхования для клиента 
     * @param id Идентификатор клиента  
     * @return Экземпляр класса {@link ResponseEntity}
     * @throws Exception исключение, выбрасываемое в случае ошибок при выполнении метода
     */
    @RequestMapping(value = "/insurance-service/v2/contracts/by-client/{id}/exists",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Boolean> existsContractByClient(@PathVariable("id") Long id) throws Exception;



    /**
     * Найти договор по коду 
     * @param code Код договора  
     * @return Экземпляр класса {@link ResponseEntity}
     * @throws Exception исключение, выбрасываемое в случае ошибок при выполнении метода
     */
    @RequestMapping(value = "/insurance-service/v2/contracts/find/{code}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<ViewInsuranceModel> findContractsByCode(@PathVariable("code") String code) throws Exception;



    /**
     * Установить признак получения полного комплекта документов 
     * @param id Идентификатор экземпляра договора страхования.
     * @param fullSetDocumentData Запрос на установку признака полного комплекта документов  
     * @return Экземпляр класса {@link ResponseEntity}
     * @throws Exception исключение, выбрасываемое в случае ошибок при выполнении метода
     */
    @RequestMapping(value = "/insurance-service/v2/contracts/fullSetDocument/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Void> fullSetDocument(@PathVariable("id") Long id,@Valid @RequestBody FullSetDocumentData fullSetDocumentData) throws Exception;



    /**
     * Получить экземпляр договора страхования. 
     * @param id Идентификатор экземпляра договора страхования.  
     * @return Экземпляр класса {@link ResponseEntity}
     * @throws Exception исключение, выбрасываемое в случае ошибок при выполнении метода
     */
    @RequestMapping(value = "/insurance-service/v2/contracts/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<ViewInsuranceModel> getContractV2(@PathVariable("id") Long id) throws Exception;



    /**
     * Сформировать выписку по оформленным договорам за указанный период. 
     * @param startDate Дата начала формирования выписки
     * @param endDate Дата окончания формирования выписки
     * @param kind Вид программы страхования  
     * @return Экземпляр класса {@link ResponseEntity}
     * @throws Exception исключение, выбрасываемое в случае ошибок при выполнении метода
     */
    @RequestMapping(value = "/insurance-service/v2/contracts/extract",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<UuidRs> getContractsExtract( @Valid @RequestParam(value = "startDate", required = false) LocalDate startDate, @Valid @RequestParam(value = "endDate", required = false) LocalDate endDate, @Valid @RequestParam(value = "kind", required = false) String kind) throws Exception;



    /**
     * Сформировать выписку по оформленным договорам за указанный период. 
     * @param startDate Дата начала формирования выписки
     * @param endDate Дата окончания формирования выписки
     * @param kind Вид программы страхования  
     * @return Экземпляр класса {@link ResponseEntity}
     * @throws Exception исключение, выбрасываемое в случае ошибок при выполнении метода
     */
    @RequestMapping(value = "/insurance-service/v2/contracts/extract/universal",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<UuidRs> getContractsUniversalExtract(@NotNull  @Valid @RequestParam(value = "startDate") LocalDate startDate,@NotNull  @Valid @RequestParam(value = "endDate") LocalDate endDate,@NotNull  @Valid @RequestParam(value = "kind") String kind) throws Exception;



    /**
     * Скачать сформированную выписку по оформленным договорам 
     * @param uuid Идентификатор процесса  
     * @return Экземпляр класса {@link ResponseEntity}
     * @throws Exception исключение, выбрасываемое в случае ошибок при выполнении метода
     */
    @RequestMapping(value = "/insurance-service/v2/contracts/extract/{uuid}/content",
        produces = { "application/octet-stream" }, 
        method = RequestMethod.GET)
    ResponseEntity<byte[]> getExtractContent(@PathVariable("uuid") String uuid) throws Exception;



    /**
     * Получить статус по формированию отчета по идентификатору 
     * @param uuid Идентификатор процесса  
     * @return Экземпляр класса {@link ResponseEntity}
     * @throws Exception исключение, выбрасываемое в случае ошибок при выполнении метода
     */
    @RequestMapping(value = "/insurance-service/v2/contracts/extract/{uuid}/status",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<ExtractStatusRs> getExtractStatus(@PathVariable("uuid") String uuid) throws Exception;



    /**
     * Получить список всех экземпляров договоров страхования.   
     * @param pageable параметры пагинации 
     * @return Экземпляр класса {@link ResponseEntity}
     * @throws Exception исключение, выбрасываемое в случае ошибок при выполнении метода
     */
    @RequestMapping(value = "/insurance-service/v2/contracts",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Page<ListInsuranceModel>> listContractV2(@PageableDefault(value = 50) Pageable pageable) throws Exception;



    /**
     * Получить список всех экземпляров договоров страхования (с фильтрацией). 
     * @param filterData Тело запроса с данными фильтрации
     * @param hasFilter Признак фильтрации договоров  
     * @param pageable параметры пагинации 
     * @return Экземпляр класса {@link ResponseEntity}
     * @throws Exception исключение, выбрасываемое в случае ошибок при выполнении метода
     */
    @RequestMapping(value = "/insurance-service/v2/contracts",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Page<ListInsuranceModel>> listFilteredContractsV2(@PageableDefault(value = 50) Pageable pageable, @Valid @RequestBody FilterContractsRq filterData, @Valid @RequestParam(value = "hasFilter", required = false) Boolean hasFilter) throws Exception;



    /**
     * Получить данные печатной формы экземпляра договора страхования. 
     * @param id Идентификатор экземпляра договора страхования.
     * @param templateId Идентификатор шаблона печатной формы.  
     * @return Экземпляр класса {@link ResponseEntity}
     * @throws Exception исключение, выбрасываемое в случае ошибок при выполнении метода
     */
    @RequestMapping(value = "/insurance-service/v2/contracts/{id}/print/{templateId}",
        produces = { "application/pdf" }, 
        method = RequestMethod.GET)
    ResponseEntity<Resource> printContractV2(@PathVariable("id") Long id,@PathVariable("templateId") String templateId) throws Exception;



    /**
     * Получить пустой шаблон формы сертификации для иностранного резидента.   
     * @return Экземпляр класса {@link ResponseEntity}
     * @throws Exception исключение, выбрасываемое в случае ошибок при выполнении метода
     */
    @RequestMapping(value = "/insurance-service/v2/contracts/print/form/certification",
        produces = { "application/pdf" }, 
        method = RequestMethod.GET)
    ResponseEntity<byte[]> printFormCertification() throws Exception;



    /**
     * Обновить экземпляр договора страхования. 
     * @param id Идентификатор экземпляра договора страхования
     * @param updateContractRequest Запрос обновления экземпляра договора страхования  
     * @return Экземпляр класса {@link ResponseEntity}
     * @throws Exception исключение, выбрасываемое в случае ошибок при выполнении метода
     */
    @RequestMapping(value = "/insurance-service/v2/contracts/{id}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> putContractV2(@PathVariable("id") Long id,@Valid @RequestBody BaseInsuranceModel updateContractRequest) throws Exception;



    /**
     * Установить индивидуальный курс валюты для договора 
     * @param insuranceId Идентификатор договора страхования
     * @param setIndividualRateRq Структура запроса на установку индивидуального курса валют для договора  
     * @return Экземпляр класса {@link ResponseEntity}
     * @throws Exception исключение, выбрасываемое в случае ошибок при выполнении метода
     */
    @RequestMapping(value = "/insurance-service/v1/contract/{insuranceId}/setRate",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> setIndividualRate(@PathVariable("insuranceId") Long insuranceId,@Valid @RequestBody IndividualRateRq setIndividualRateRq) throws Exception;



    /**
     * Обновить экземпляр договора страхования и установить новый статус. 
     * @param id Идентификатор экземпляра договора страхования
     * @param setStatusContractRequest Запрос обновления экземпляра договора страхования  
     * @return Экземпляр класса {@link ResponseEntity}
     * @throws Exception исключение, выбрасываемое в случае ошибок при выполнении метода
     */
    @RequestMapping(value = "/insurance-service/v2/contracts/{id}/setStatus",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> setStatusContractV2(@PathVariable("id") Long id,@Valid @RequestBody SetStatusInsuranceModel setStatusContractRequest) throws Exception;


}
