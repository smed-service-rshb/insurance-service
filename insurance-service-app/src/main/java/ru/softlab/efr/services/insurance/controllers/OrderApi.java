/**
 * NOTE: This class is auto generated by the swagger code generator program (2.3.1).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package ru.softlab.efr.services.insurance.controllers;

import ru.softlab.efr.services.insurance.model.rest.CreateOrderResponse;
import ru.softlab.efr.services.insurance.model.rest.ErrorModel;
import ru.softlab.efr.services.insurance.model.rest.OrderData;

import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.validation.BindingResult;
import org.springframework.data.web.PageableDefault;
import org.springframework.data.domain.*;

import java.util.*;

import org.springframework.validation.annotation.Validated;
import javax.validation.constraints.*;
import javax.validation.Valid;

/**
 * the Order API
 */
public interface OrderApi {

    /**
     * Создать заказ на оплату договора страхования 
     * @param createOrder Данные для создания заказа  
     * @return Экземпляр класса {@link ResponseEntity}
     * @throws Exception исключение, выбрасываемое в случае ошибок при выполнении метода
     */
    @RequestMapping(value = "/insurance-service/public/v2/order/create",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<CreateOrderResponse> createOrder(@Valid @RequestBody OrderData createOrder) throws Exception;



    /**
     * Получить заказ на оплату договора страхования 
     * @param id Идентификатор экземпляра заказа на оплату договора страхования  
     * @return Экземпляр класса {@link ResponseEntity}
     * @throws Exception исключение, выбрасываемое в случае ошибок при выполнении метода
     */
    @RequestMapping(value = "/insurance-service/public/v2/order/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<OrderData> getOrder(@PathVariable("id") Long id) throws Exception;



    /**
     * Получить заказ на оплату договора страхования   
     * @param pageable параметры пагинации 
     * @return Экземпляр класса {@link ResponseEntity}
     * @throws Exception исключение, выбрасываемое в случае ошибок при выполнении метода
     */
    @RequestMapping(value = "/insurance-service/public/v2/order",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<Page<OrderData>> getOrderList(@PageableDefault(value = 50) Pageable pageable) throws Exception;



    /**
     * Обновить заказ на оплату договора страхования 
     * @param id Идентификатор экземпляра заказа на оплату договора страхования
     * @param orderData Данные для обновления заказа на оплату договора страхования  
     * @return Экземпляр класса {@link ResponseEntity}
     * @throws Exception исключение, выбрасываемое в случае ошибок при выполнении метода
     */
    @RequestMapping(value = "/insurance-service/public/v2/order/{id}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> updateOrder(@PathVariable("id") Long id,@Valid @RequestBody OrderData orderData) throws Exception;


}
