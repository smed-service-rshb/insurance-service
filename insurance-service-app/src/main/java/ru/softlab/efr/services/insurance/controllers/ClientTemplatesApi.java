/**
 * NOTE: This class is auto generated by the swagger code generator program (2.3.1).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package ru.softlab.efr.services.insurance.controllers;

import ru.softlab.efr.services.insurance.model.rest.ClientTemplateData;
import ru.softlab.efr.services.insurance.model.rest.ClientTemplateDataForList;
import ru.softlab.efr.services.insurance.model.rest.ClientTemplateList;
import ru.softlab.efr.services.insurance.model.rest.ErrorModel;
import ru.softlab.efr.services.insurance.model.rest.FilterClientTemplates;
import org.springframework.core.io.Resource;
import ru.softlab.efr.services.insurance.model.rest.UuidRs;

import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.validation.BindingResult;
import org.springframework.data.web.PageableDefault;
import org.springframework.data.domain.*;

import java.util.*;

import org.springframework.validation.annotation.Validated;
import javax.validation.constraints.*;
import javax.validation.Valid;

/**
 * the ClientTemplates API
 */
public interface ClientTemplatesApi {

    /**
     * Сохранить документ, прикладываеммый к записи справочника шаблонов и инструкций 
     * @param content файл в форматах pdf, jpeg, gif, с размером до 5Мб  
     * @return Экземпляр класса {@link ResponseEntity}
     * @throws Exception исключение, выбрасываемое в случае ошибок при выполнении метода
     */
    @RequestMapping(value = "/insurance-service/v1/attach/client-templates",
        method = RequestMethod.POST)
    ResponseEntity<UuidRs> addTemplateContent(@Valid @RequestPart(value="content", required=false) MultipartFile content) throws Exception;



    /**
     * Создать запись в справочнике шаблонов заявлений и инструкций 
     * @param body Данные записи справочника шаблонов заявлений и инструкций  
     * @return Экземпляр класса {@link ResponseEntity}
     * @throws Exception исключение, выбрасываемое в случае ошибок при выполнении метода
     */
    @RequestMapping(value = "/insurance-service/v1/client-templates",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<ClientTemplateData> createClientTemplates(@Valid @RequestBody ClientTemplateData body) throws Exception;



    /**
     * Удалить файл, приложенный к записи справочника шаблонов и инструкций 
     * @param attachId Идентификатор файла  
     * @return Экземпляр класса {@link ResponseEntity}
     * @throws Exception исключение, выбрасываемое в случае ошибок при выполнении метода
     */
    @RequestMapping(value = "/insurance-service/v1/attach/client-templates/{attachId}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteTemplateContent(@PathVariable("attachId") String attachId) throws Exception;



    /**
     * Подучить данные по элементу справочника шаблонов заявлений и инструкций 
     * @param id Идентификатор записи справочника шаблонов заявлений и инструкций  
     * @return Экземпляр класса {@link ResponseEntity}
     * @throws Exception исключение, выбрасываемое в случае ошибок при выполнении метода
     */
    @RequestMapping(value = "/insurance-service/v1/client-templates/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<ClientTemplateData> getClientTemplate(@PathVariable("id") Long id) throws Exception;



    /**
     * Получить список шаблонов и инструкций актуальных для договора 
     * @param insuranceId Идентификатор договора страхования  
     * @return Экземпляр класса {@link ResponseEntity}
     * @throws Exception исключение, выбрасываемое в случае ошибок при выполнении метода
     */
    @RequestMapping(value = "/insurance-service/v1/consumers/client-templates/{insuranceId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<ClientTemplateList> getClientTemplates(@PathVariable("insuranceId") Long insuranceId) throws Exception;



    /**
     * Получить список шаблонов заявлений и инструкций 
     * @param filter Тело запроса с данными фильтрации
     * @param hasFilter Признак фильтрации  
     * @param pageable параметры пагинации 
     * @return Экземпляр класса {@link ResponseEntity}
     * @throws Exception исключение, выбрасываемое в случае ошибок при выполнении метода
     */
    @RequestMapping(value = "/insurance-service/v1/client-templates",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Page<ClientTemplateDataForList>> getClientTemplatesList(@PageableDefault(value = 50) Pageable pageable, @Valid @RequestBody FilterClientTemplates filter, @Valid @RequestParam(value = "hasFilter", required = false) Boolean hasFilter) throws Exception;



    /**
     * Получить масcив байтов файла, приложенного к записи справочника шаблонов и инструкций 
     * @param attachId Идентификатор файла  
     * @return Экземпляр класса {@link ResponseEntity}
     * @throws Exception исключение, выбрасываемое в случае ошибок при выполнении метода
     */
    @RequestMapping(value = "/insurance-service/v1/attach/client-templates/{attachId}",
        produces = { "application/octet-stream" }, 
        method = RequestMethod.GET)
    ResponseEntity<byte[]> getTemplateContent(@PathVariable("attachId") String attachId) throws Exception;



    /**
     * Обновить запись справочника шаблонов заявлений и инструкций 
     * @param id Идентификатор записи справочника
     * @param body Данные записи справочника шаблонов заявлений и инструкций  
     * @return Экземпляр класса {@link ResponseEntity}
     * @throws Exception исключение, выбрасываемое в случае ошибок при выполнении метода
     */
    @RequestMapping(value = "/insurance-service/v1/client-templates/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<ClientTemplateData> updateClientTemplates(@PathVariable("id") Long id,@Valid @RequestBody ClientTemplateData body) throws Exception;


}
