/**
 * NOTE: This class is auto generated by the swagger code generator program (2.3.1).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package ru.softlab.efr.services.insurance.controllers;

import ru.softlab.efr.services.insurance.model.rest.ContractTemplatesRs;
import ru.softlab.efr.services.insurance.model.rest.ListInsuranceModel;
import ru.softlab.efr.services.insurance.model.rest.RedemptionList;
import org.springframework.core.io.Resource;
import ru.softlab.efr.services.insurance.model.rest.ViewInsuranceModel;

import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.validation.BindingResult;
import org.springframework.data.web.PageableDefault;
import org.springframework.data.domain.*;

import java.util.*;

import org.springframework.validation.annotation.Validated;
import javax.validation.constraints.*;
import javax.validation.Valid;

/**
 * the ConsumerProducts API
 */
public interface ConsumerProductsApi {

    /**
     * Получить экземпляр договора страхования для клиента. 
     * @param id Идентификатор экземпляра договора страхования.  
     * @return Экземпляр класса {@link ResponseEntity}
     * @throws Exception исключение, выбрасываемое в случае ошибок при выполнении метода
     */
    @RequestMapping(value = "/insurance-service/v2/consumer/contracts/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<ViewInsuranceModel> getConsumerContractV2(@PathVariable("id") Long id) throws Exception;



    /**
     * Получить перечень документов договора. 
     * @param id Идентификатор экземпляра договора страхования.  
     * @return Экземпляр класса {@link ResponseEntity}
     * @throws Exception исключение, выбрасываемое в случае ошибок при выполнении метода
     */
    @RequestMapping(value = "/insurance-service/v2/consumer/contracts/{id}/document/templates",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<ContractTemplatesRs> getContractDocuments(@PathVariable("id") Long id) throws Exception;



    /**
     * Получить список выкупных сумм для договора 
     * @param contractId Идентификатор договора  
     * @return Экземпляр класса {@link ResponseEntity}
     * @throws Exception исключение, выбрасываемое в случае ошибок при выполнении метода
     */
    @RequestMapping(value = "/insurance-service/v2/consumer/contracts/{contractId}/redemption",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<RedemptionList> getRedemptionList(@PathVariable("contractId") Long contractId) throws Exception;



    /**
     * Получить список всех экземпляров договоров страхования для клиента.   
     * @param pageable параметры пагинации 
     * @return Экземпляр класса {@link ResponseEntity}
     * @throws Exception исключение, выбрасываемое в случае ошибок при выполнении метода
     */
    @RequestMapping(value = "/insurance-service/v2/consumer/contracts",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Page<ListInsuranceModel>> listConsumerContractV2(@PageableDefault(value = 50) Pageable pageable) throws Exception;



    /**
     * Получить данные печатной формы экземпляра договора страхования. 
     * @param id Идентификатор экземпляра договора страхования.
     * @param templateId Идентификатор шаблона печатной формы.  
     * @return Экземпляр класса {@link ResponseEntity}
     * @throws Exception исключение, выбрасываемое в случае ошибок при выполнении метода
     */
    @RequestMapping(value = "/insurance-service/v2/consumer/contracts/{id}/document/{templateId}/print",
        produces = { "application/pdf" }, 
        method = RequestMethod.GET)
    ResponseEntity<Resource> printContract(@PathVariable("id") Long id,@PathVariable("templateId") String templateId) throws Exception;



    /**
     * Отправить документы договора страхования на email клиента. 
     * @param id Идентификатор экземпляра договора страхования.
     * @param email E-mail  
     * @return Экземпляр класса {@link ResponseEntity}
     * @throws Exception исключение, выбрасываемое в случае ошибок при выполнении метода
     */
    @RequestMapping(value = "/insurance-service/v2/consumer/contracts/{id}/document/send",
        method = RequestMethod.GET)
    ResponseEntity<Void> sendContractDocuments(@PathVariable("id") Long id, @Valid @RequestParam(value = "email", required = false) String email) throws Exception;


}
