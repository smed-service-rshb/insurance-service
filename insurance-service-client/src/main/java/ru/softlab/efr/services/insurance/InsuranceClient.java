/*
 * API микросервиса управления договорами страхования
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package ru.softlab.efr.services.insurance;

import ru.softlab.efr.services.insurance.model.rest.BaseInsuranceModel;
import ru.softlab.efr.services.insurance.model.rest.CreateInsuranceResponse;
import ru.softlab.efr.services.insurance.model.rest.ErrorModel;
import ru.softlab.efr.services.insurance.model.rest.ExtractStatusRs;
import ru.softlab.efr.services.insurance.model.rest.FilterContractsRq;
import ru.softlab.efr.services.insurance.model.rest.FoundMultipleClients;
import ru.softlab.efr.services.insurance.model.rest.FullSetDocumentData;
import ru.softlab.efr.services.insurance.model.rest.IndividualRateRq;
import ru.softlab.efr.services.insurance.model.rest.ListInsuranceModel;
import java.time.LocalDate;
import org.springframework.core.io.Resource;
import ru.softlab.efr.services.insurance.model.rest.SetStatusInsuranceModel;
import ru.softlab.efr.services.insurance.model.rest.UuidRs;
import ru.softlab.efr.services.insurance.model.rest.ViewInsuranceModel;

import ru.softlab.efr.infrastructure.transport.client.*;
import ru.softlab.efr.common.utilities.rest.*;
import ru.softlab.efr.common.utilities.rest.client.*;
import ru.softlab.efr.common.utilities.rest.converters.DateParser;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;

import ru.softlab.efr.infrastructure.transport.client.impl.JmsUriBuilder;

import org.springframework.core.ParameterizedTypeReference;
import org.springframework.http.*;
import org.springframework.util.*;
import org.springframework.util.concurrent.ListenableFuture;
import org.springframework.stereotype.Component;

import java.util.*;

/**
 * Содержит методы для взаимодействия с приложением insurance-service
 **/
@Component
public class InsuranceClient {
    private static final String REQUIRED_PARAM_ERROR = "Не указан обязательный параметр '%s' при вызове %s";
    private String applicationName;
    private static final String STATUS_CODE_TEMPLATE = "status code: [%s]";

    private final MicroServiceTemplate microServiceTemplate;

    /**
     * Возвращяет экземпляр класса
     * @param microServiceTemplate - объект, реализующий интерфейс {@link MicroServiceTemplate}
     */
    public InsuranceClient(MicroServiceTemplate microServiceTemplate) {
        this.microServiceTemplate = microServiceTemplate;
        this.applicationName = "insurance-service";
    }


    /**
     * Создать экземпляр договора страхования.
     * POST /insurance-service/v2/contracts
     *
     * @param createContractRequest Запрос создания экземпляра договора страхования (required)
     * @param timeout таймаут ожидания ответа на асинхронный запрос
     * @return Идентификатор созданного договора страхования
     * @throws RestClientException в случае неудачи
    */
    public CreateInsuranceResponse createContractV2(BaseInsuranceModel createContractRequest, long timeout) throws RestClientException {
        return createContractV2(createContractRequest).get(timeout);
    }

    /**
     * Создать экземпляр договора страхования. асинхронно
     * POST /insurance-service/v2/contracts
     *
     * @param createContractRequest Запрос создания экземпляра договора страхования (required)
     * @return Идентификатор созданного договора страхования
     * @throws RestClientException в случае неудачи
    */
    public ClientRestResult<CreateInsuranceResponse> createContractV2(BaseInsuranceModel createContractRequest) throws RestClientException {
        return new ClientRestResult<>(createContractV2Internal(createContractRequest), this::processStatusCodeErrors);
    }

    private ListenableFuture<ResponseEntity<CreateInsuranceResponse>> createContractV2Internal(BaseInsuranceModel createContractRequest) throws RestClientException {
        if (createContractRequest == null)
            throw new RestClientException(String.format(REQUIRED_PARAM_ERROR, "createContractRequest", "createContractV2"));
        

        MicroServiceURIBuilder uriBuilder = JmsUriBuilder.service(applicationName)
            .path(cutComments("/insurance-service/v2/contracts"));

        RequestEntity requestEntity = RequestEntity
                  .method(HttpMethod.POST, uriBuilder.build())
                  .body(createContractRequest);
        return microServiceTemplate.exchange(requestEntity,
                    new ParameterizedTypeReference<CreateInsuranceResponse>(){});
    }

    /**
     * Удалить экземпляр договора страхования.
     * DELETE /insurance-service/v2/contracts/{id}
     *
     * @param id Идентификатор экземпляра договора страхования (required)
     * @param timeout таймаут ожидания ответа на асинхронный запрос
     * @throws RestClientException в случае неудачи
    */
    public Void deleteContractV2(Long id, long timeout) throws RestClientException {
        return deleteContractV2(id).get(timeout);
    }

    /**
     * Удалить экземпляр договора страхования. асинхронно
     * DELETE /insurance-service/v2/contracts/{id}
     *
     * @param id Идентификатор экземпляра договора страхования (required)
     * @throws RestClientException в случае неудачи
    */
    public ClientRestResult<Void> deleteContractV2(Long id) throws RestClientException {
        return new ClientRestResult<>(deleteContractV2Internal(id), this::processStatusCodeErrors);
    }

    private ListenableFuture<ResponseEntity<Void>> deleteContractV2Internal(Long id) throws RestClientException {
        if (id == null)
            throw new RestClientException(String.format(REQUIRED_PARAM_ERROR, "id", "deleteContractV2"));
        

        MicroServiceURIBuilder uriBuilder = JmsUriBuilder.service(applicationName)
            .path(cutComments("/insurance-service/v2/contracts/{id}")).variable("id", id);

        RequestEntity requestEntity = RequestEntity
                  .method(HttpMethod.DELETE, uriBuilder.build())
                  .build();
        return microServiceTemplate.exchange(requestEntity,
                    new ParameterizedTypeReference<Void>(){});
    }

    /**
     * Вернуть признак наличия оформленного договора страхования для клиента
     * GET /insurance-service/v2/contracts/by-client/{id}/exists
     *
     * @param id Идентификатор клиента (required)
     * @param timeout таймаут ожидания ответа на асинхронный запрос
     * @return 
     * @throws RestClientException в случае неудачи
    */
    public Boolean existsContractByClient(Long id, long timeout) throws RestClientException {
        return existsContractByClient(id).get(timeout);
    }

    /**
     * Вернуть признак наличия оформленного договора страхования для клиента асинхронно
     * GET /insurance-service/v2/contracts/by-client/{id}/exists
     *
     * @param id Идентификатор клиента (required)
     * @return 
     * @throws RestClientException в случае неудачи
    */
    public ClientRestResult<Boolean> existsContractByClient(Long id) throws RestClientException {
        return new ClientRestResult<>(existsContractByClientInternal(id), this::processStatusCodeErrors);
    }

    private ListenableFuture<ResponseEntity<Boolean>> existsContractByClientInternal(Long id) throws RestClientException {
        if (id == null)
            throw new RestClientException(String.format(REQUIRED_PARAM_ERROR, "id", "existsContractByClient"));
        

        MicroServiceURIBuilder uriBuilder = JmsUriBuilder.service(applicationName)
            .path(cutComments("/insurance-service/v2/contracts/by-client/{id}/exists")).variable("id", id);

        RequestEntity requestEntity = RequestEntity
                  .method(HttpMethod.GET, uriBuilder.build())
                  .build();
        return microServiceTemplate.exchange(requestEntity,
                    new ParameterizedTypeReference<Boolean>(){});
    }

    /**
     * Найти договор по коду
     * GET /insurance-service/v2/contracts/find/{code}
     *
     * @param code Код договора (required)
     * @param timeout таймаут ожидания ответа на асинхронный запрос
     * @return Данные экземпляра договора страхования.
     * @throws RestClientException в случае неудачи
    */
    public ViewInsuranceModel findContractsByCode(String code, long timeout) throws RestClientException {
        return findContractsByCode(code).get(timeout);
    }

    /**
     * Найти договор по коду асинхронно
     * GET /insurance-service/v2/contracts/find/{code}
     *
     * @param code Код договора (required)
     * @return Данные экземпляра договора страхования.
     * @throws RestClientException в случае неудачи
    */
    public ClientRestResult<ViewInsuranceModel> findContractsByCode(String code) throws RestClientException {
        return new ClientRestResult<>(findContractsByCodeInternal(code), this::processStatusCodeErrors);
    }

    private ListenableFuture<ResponseEntity<ViewInsuranceModel>> findContractsByCodeInternal(String code) throws RestClientException {
        if (code == null)
            throw new RestClientException(String.format(REQUIRED_PARAM_ERROR, "code", "findContractsByCode"));
        

        MicroServiceURIBuilder uriBuilder = JmsUriBuilder.service(applicationName)
            .path(cutComments("/insurance-service/v2/contracts/find/{code}")).variable("code", code);

        RequestEntity requestEntity = RequestEntity
                  .method(HttpMethod.GET, uriBuilder.build())
                  .build();
        return microServiceTemplate.exchange(requestEntity,
                    new ParameterizedTypeReference<ViewInsuranceModel>(){});
    }

    /**
     * Установить признак получения полного комплекта документов
     * POST /insurance-service/v2/contracts/fullSetDocument/{id}
     *
     * @param id Идентификатор экземпляра договора страхования. (required)
     * @param fullSetDocumentData Запрос на установку признака полного комплекта документов (required)
     * @param timeout таймаут ожидания ответа на асинхронный запрос
     * @throws RestClientException в случае неудачи
    */
    public Void fullSetDocument(Long id, FullSetDocumentData fullSetDocumentData, long timeout) throws RestClientException {
        return fullSetDocument(id, fullSetDocumentData).get(timeout);
    }

    /**
     * Установить признак получения полного комплекта документов асинхронно
     * POST /insurance-service/v2/contracts/fullSetDocument/{id}
     *
     * @param id Идентификатор экземпляра договора страхования. (required)
     * @param fullSetDocumentData Запрос на установку признака полного комплекта документов (required)
     * @throws RestClientException в случае неудачи
    */
    public ClientRestResult<Void> fullSetDocument(Long id, FullSetDocumentData fullSetDocumentData) throws RestClientException {
        return new ClientRestResult<>(fullSetDocumentInternal(id, fullSetDocumentData), this::processStatusCodeErrors);
    }

    private ListenableFuture<ResponseEntity<Void>> fullSetDocumentInternal(Long id, FullSetDocumentData fullSetDocumentData) throws RestClientException {
        if (id == null)
            throw new RestClientException(String.format(REQUIRED_PARAM_ERROR, "id", "fullSetDocument"));
        if (fullSetDocumentData == null)
            throw new RestClientException(String.format(REQUIRED_PARAM_ERROR, "fullSetDocumentData", "fullSetDocument"));
        

        MicroServiceURIBuilder uriBuilder = JmsUriBuilder.service(applicationName)
            .path(cutComments("/insurance-service/v2/contracts/fullSetDocument/{id}")).variable("id", id);

        RequestEntity requestEntity = RequestEntity
                  .method(HttpMethod.POST, uriBuilder.build())
                  .body(fullSetDocumentData);
        return microServiceTemplate.exchange(requestEntity,
                    new ParameterizedTypeReference<Void>(){});
    }

    /**
     * Получить экземпляр договора страхования.
     * GET /insurance-service/v2/contracts/{id}
     *
     * @param id Идентификатор экземпляра договора страхования. (required)
     * @param timeout таймаут ожидания ответа на асинхронный запрос
     * @return Данные экземпляра договора страхования.
     * @throws RestClientException в случае неудачи
    */
    public ViewInsuranceModel getContractV2(Long id, long timeout) throws RestClientException {
        return getContractV2(id).get(timeout);
    }

    /**
     * Получить экземпляр договора страхования. асинхронно
     * GET /insurance-service/v2/contracts/{id}
     *
     * @param id Идентификатор экземпляра договора страхования. (required)
     * @return Данные экземпляра договора страхования.
     * @throws RestClientException в случае неудачи
    */
    public ClientRestResult<ViewInsuranceModel> getContractV2(Long id) throws RestClientException {
        return new ClientRestResult<>(getContractV2Internal(id), this::processStatusCodeErrors);
    }

    private ListenableFuture<ResponseEntity<ViewInsuranceModel>> getContractV2Internal(Long id) throws RestClientException {
        if (id == null)
            throw new RestClientException(String.format(REQUIRED_PARAM_ERROR, "id", "getContractV2"));
        

        MicroServiceURIBuilder uriBuilder = JmsUriBuilder.service(applicationName)
            .path(cutComments("/insurance-service/v2/contracts/{id}")).variable("id", id);

        RequestEntity requestEntity = RequestEntity
                  .method(HttpMethod.GET, uriBuilder.build())
                  .build();
        return microServiceTemplate.exchange(requestEntity,
                    new ParameterizedTypeReference<ViewInsuranceModel>(){});
    }

    /**
     * Сформировать выписку по оформленным договорам за указанный период.
     * GET /insurance-service/v2/contracts/extract
     *
     * @param startDate Дата начала формирования выписки (optional)
     * @param endDate Дата окончания формирования выписки (optional)
     * @param kind Вид программы страхования (optional)
     * @param timeout таймаут ожидания ответа на асинхронный запрос
     * @return 
     * @throws RestClientException в случае неудачи
    */
    public UuidRs getContractsExtract(LocalDate startDate, LocalDate endDate, String kind, long timeout) throws RestClientException {
        return getContractsExtract(startDate, endDate, kind).get(timeout);
    }

    /**
     * Сформировать выписку по оформленным договорам за указанный период. асинхронно
     * GET /insurance-service/v2/contracts/extract
     *
     * @param startDate Дата начала формирования выписки (optional)
     * @param endDate Дата окончания формирования выписки (optional)
     * @param kind Вид программы страхования (optional)
     * @return 
     * @throws RestClientException в случае неудачи
    */
    public ClientRestResult<UuidRs> getContractsExtract(LocalDate startDate, LocalDate endDate, String kind) throws RestClientException {
        return new ClientRestResult<>(getContractsExtractInternal(startDate, endDate, kind), this::processStatusCodeErrors);
    }

    private ListenableFuture<ResponseEntity<UuidRs>> getContractsExtractInternal(LocalDate startDate, LocalDate endDate, String kind) throws RestClientException {
        

        MicroServiceURIBuilder uriBuilder = JmsUriBuilder.service(applicationName)
            .path(cutComments("/insurance-service/v2/contracts/extract"));

        if (startDate != null)
            uriBuilder.param("startDate", DateParser.format(startDate));
        if (endDate != null)
            uriBuilder.param("endDate", DateParser.format(endDate));
        if (kind != null)
            uriBuilder.param("kind", kind);
        RequestEntity requestEntity = RequestEntity
                  .method(HttpMethod.GET, uriBuilder.build())
                  .build();
        return microServiceTemplate.exchange(requestEntity,
                    new ParameterizedTypeReference<UuidRs>(){});
    }

    /**
     * Сформировать выписку по оформленным договорам за указанный период.
     * GET /insurance-service/v2/contracts/extract/universal
     *
     * @param startDate Дата начала формирования выписки (required)
     * @param endDate Дата окончания формирования выписки (required)
     * @param kind Вид программы страхования (required)
     * @param timeout таймаут ожидания ответа на асинхронный запрос
     * @return 
     * @throws RestClientException в случае неудачи
    */
    public UuidRs getContractsUniversalExtract(LocalDate startDate, LocalDate endDate, String kind, long timeout) throws RestClientException {
        return getContractsUniversalExtract(startDate, endDate, kind).get(timeout);
    }

    /**
     * Сформировать выписку по оформленным договорам за указанный период. асинхронно
     * GET /insurance-service/v2/contracts/extract/universal
     *
     * @param startDate Дата начала формирования выписки (required)
     * @param endDate Дата окончания формирования выписки (required)
     * @param kind Вид программы страхования (required)
     * @return 
     * @throws RestClientException в случае неудачи
    */
    public ClientRestResult<UuidRs> getContractsUniversalExtract(LocalDate startDate, LocalDate endDate, String kind) throws RestClientException {
        return new ClientRestResult<>(getContractsUniversalExtractInternal(startDate, endDate, kind), this::processStatusCodeErrors);
    }

    private ListenableFuture<ResponseEntity<UuidRs>> getContractsUniversalExtractInternal(LocalDate startDate, LocalDate endDate, String kind) throws RestClientException {
        if (startDate == null)
            throw new RestClientException(String.format(REQUIRED_PARAM_ERROR, "startDate", "getContractsUniversalExtract"));
        if (endDate == null)
            throw new RestClientException(String.format(REQUIRED_PARAM_ERROR, "endDate", "getContractsUniversalExtract"));
        if (kind == null)
            throw new RestClientException(String.format(REQUIRED_PARAM_ERROR, "kind", "getContractsUniversalExtract"));
        

        MicroServiceURIBuilder uriBuilder = JmsUriBuilder.service(applicationName)
            .path(cutComments("/insurance-service/v2/contracts/extract/universal"));

        if (startDate != null)
            uriBuilder.param("startDate", DateParser.format(startDate));
        if (endDate != null)
            uriBuilder.param("endDate", DateParser.format(endDate));
        if (kind != null)
            uriBuilder.param("kind", kind);
        RequestEntity requestEntity = RequestEntity
                  .method(HttpMethod.GET, uriBuilder.build())
                  .build();
        return microServiceTemplate.exchange(requestEntity,
                    new ParameterizedTypeReference<UuidRs>(){});
    }

    /**
     * Скачать сформированную выписку по оформленным договорам
     * GET /insurance-service/v2/contracts/extract/{uuid}/content
     *
     * @param uuid Идентификатор процесса (required)
     * @param timeout таймаут ожидания ответа на асинхронный запрос
     * @return 
     * @throws RestClientException в случае неудачи
    */
    public byte[] getExtractContent(String uuid, long timeout) throws RestClientException {
        return getExtractContent(uuid).get(timeout);
    }

    /**
     * Скачать сформированную выписку по оформленным договорам асинхронно
     * GET /insurance-service/v2/contracts/extract/{uuid}/content
     *
     * @param uuid Идентификатор процесса (required)
     * @return 
     * @throws RestClientException в случае неудачи
    */
    public ClientRestResult<byte[]> getExtractContent(String uuid) throws RestClientException {
        return new ClientRestResult<>(getExtractContentInternal(uuid), this::processStatusCodeErrors);
    }

    private ListenableFuture<ResponseEntity<byte[]>> getExtractContentInternal(String uuid) throws RestClientException {
        if (uuid == null)
            throw new RestClientException(String.format(REQUIRED_PARAM_ERROR, "uuid", "getExtractContent"));
        

        MicroServiceURIBuilder uriBuilder = JmsUriBuilder.service(applicationName)
            .path(cutComments("/insurance-service/v2/contracts/extract/{uuid}/content")).variable("uuid", uuid);

        RequestEntity requestEntity = RequestEntity
                  .method(HttpMethod.GET, uriBuilder.build())
                  .build();
        return microServiceTemplate.exchange(requestEntity,
                    new ParameterizedTypeReference<byte[]>(){});
    }

    /**
     * Получить статус по формированию отчета по идентификатору
     * GET /insurance-service/v2/contracts/extract/{uuid}/status
     *
     * @param uuid Идентификатор процесса (required)
     * @param timeout таймаут ожидания ответа на асинхронный запрос
     * @return 
     * @throws RestClientException в случае неудачи
    */
    public ExtractStatusRs getExtractStatus(String uuid, long timeout) throws RestClientException {
        return getExtractStatus(uuid).get(timeout);
    }

    /**
     * Получить статус по формированию отчета по идентификатору асинхронно
     * GET /insurance-service/v2/contracts/extract/{uuid}/status
     *
     * @param uuid Идентификатор процесса (required)
     * @return 
     * @throws RestClientException в случае неудачи
    */
    public ClientRestResult<ExtractStatusRs> getExtractStatus(String uuid) throws RestClientException {
        return new ClientRestResult<>(getExtractStatusInternal(uuid), this::processStatusCodeErrors);
    }

    private ListenableFuture<ResponseEntity<ExtractStatusRs>> getExtractStatusInternal(String uuid) throws RestClientException {
        if (uuid == null)
            throw new RestClientException(String.format(REQUIRED_PARAM_ERROR, "uuid", "getExtractStatus"));
        

        MicroServiceURIBuilder uriBuilder = JmsUriBuilder.service(applicationName)
            .path(cutComments("/insurance-service/v2/contracts/extract/{uuid}/status")).variable("uuid", uuid);

        RequestEntity requestEntity = RequestEntity
                  .method(HttpMethod.GET, uriBuilder.build())
                  .build();
        return microServiceTemplate.exchange(requestEntity,
                    new ParameterizedTypeReference<ExtractStatusRs>(){});
    }

    /**
     * Получить список всех экземпляров договоров страхования.
     * GET /insurance-service/v2/contracts
     *
     * @param timeout таймаут ожидания ответа на асинхронный запрос
     * @return Постраничный вывод договоров
     * @throws RestClientException в случае неудачи
    */
    public RestPageImpl<ListInsuranceModel> listContractV2(Pageable pageable, long timeout) throws RestClientException {
        return listContractV2(pageable).get(timeout);
    }

    /**
     * Получить список всех экземпляров договоров страхования. асинхронно
     * GET /insurance-service/v2/contracts
     *
     * @return Постраничный вывод договоров
     * @throws RestClientException в случае неудачи
    */
    public ClientRestResult<RestPageImpl<ListInsuranceModel>> listContractV2(Pageable pageable) throws RestClientException {
        return new ClientRestResult<>(listContractV2Internal(pageable), this::processStatusCodeErrors);
    }

    private ListenableFuture<ResponseEntity<RestPageImpl<ListInsuranceModel>>> listContractV2Internal(Pageable pageable) throws RestClientException {
        

        MicroServiceURIBuilder uriBuilder = JmsUriBuilder.service(applicationName)
            .path(cutComments("/insurance-service/v2/contracts"));

        addPageableParams(uriBuilder, pageable);
        RequestEntity requestEntity = RequestEntity
                  .method(HttpMethod.GET, uriBuilder.build())
                  .build();
        return microServiceTemplate.exchange(requestEntity,
                    new ParameterizedTypeReference<RestPageImpl<ListInsuranceModel>>(){});
    }

    /**
     * Получить список всех экземпляров договоров страхования (с фильтрацией).
     * PUT /insurance-service/v2/contracts
     *
     * @param filterData Тело запроса с данными фильтрации (optional)
     * @param hasFilter Признак фильтрации договоров (optional)
     * @param timeout таймаут ожидания ответа на асинхронный запрос
     * @return Постраничный вывод договоров
     * @throws RestClientException в случае неудачи
    */
    public RestPageImpl<ListInsuranceModel> listFilteredContractsV2(Pageable pageable, FilterContractsRq filterData, Boolean hasFilter, long timeout) throws RestClientException {
        return listFilteredContractsV2(pageable, filterData, hasFilter).get(timeout);
    }

    /**
     * Получить список всех экземпляров договоров страхования (с фильтрацией). асинхронно
     * PUT /insurance-service/v2/contracts
     *
     * @param filterData Тело запроса с данными фильтрации (optional)
     * @param hasFilter Признак фильтрации договоров (optional)
     * @return Постраничный вывод договоров
     * @throws RestClientException в случае неудачи
    */
    public ClientRestResult<RestPageImpl<ListInsuranceModel>> listFilteredContractsV2(Pageable pageable, FilterContractsRq filterData, Boolean hasFilter) throws RestClientException {
        return new ClientRestResult<>(listFilteredContractsV2Internal(pageable, filterData, hasFilter), this::processStatusCodeErrors);
    }

    private ListenableFuture<ResponseEntity<RestPageImpl<ListInsuranceModel>>> listFilteredContractsV2Internal(Pageable pageable, FilterContractsRq filterData, Boolean hasFilter) throws RestClientException {
        

        MicroServiceURIBuilder uriBuilder = JmsUriBuilder.service(applicationName)
            .path(cutComments("/insurance-service/v2/contracts"));

        addPageableParams(uriBuilder, pageable);
        if (hasFilter != null)
            uriBuilder.param("hasFilter", hasFilter);
        RequestEntity requestEntity = RequestEntity
                  .method(HttpMethod.PUT, uriBuilder.build())
                  .body(filterData);
        return microServiceTemplate.exchange(requestEntity,
                    new ParameterizedTypeReference<RestPageImpl<ListInsuranceModel>>(){});
    }

    /**
     * Получить данные печатной формы экземпляра договора страхования.
     * GET /insurance-service/v2/contracts/{id}/print/{templateId}
     *
     * @param id Идентификатор экземпляра договора страхования. (required)
     * @param templateId Идентификатор шаблона печатной формы. (required)
     * @param timeout таймаут ожидания ответа на асинхронный запрос
     * @return 
     * @throws RestClientException в случае неудачи
    */
    public Resource printContractV2(Long id, String templateId, long timeout) throws RestClientException {
        return printContractV2(id, templateId).get(timeout);
    }

    /**
     * Получить данные печатной формы экземпляра договора страхования. асинхронно
     * GET /insurance-service/v2/contracts/{id}/print/{templateId}
     *
     * @param id Идентификатор экземпляра договора страхования. (required)
     * @param templateId Идентификатор шаблона печатной формы. (required)
     * @return 
     * @throws RestClientException в случае неудачи
    */
    public ClientRestResult<Resource> printContractV2(Long id, String templateId) throws RestClientException {
        return new ClientRestResult<>(printContractV2Internal(id, templateId), this::processStatusCodeErrors);
    }

    private ListenableFuture<ResponseEntity<Resource>> printContractV2Internal(Long id, String templateId) throws RestClientException {
        if (id == null)
            throw new RestClientException(String.format(REQUIRED_PARAM_ERROR, "id", "printContractV2"));
        if (templateId == null)
            throw new RestClientException(String.format(REQUIRED_PARAM_ERROR, "templateId", "printContractV2"));
        

        MicroServiceURIBuilder uriBuilder = JmsUriBuilder.service(applicationName)
            .path(cutComments("/insurance-service/v2/contracts/{id}/print/{templateId}")).variable("id", id).variable("templateId", templateId);

        RequestEntity requestEntity = RequestEntity
                  .method(HttpMethod.GET, uriBuilder.build())
                  .build();
        return microServiceTemplate.exchange(requestEntity,
                    new ParameterizedTypeReference<Resource>(){});
    }

    /**
     * Получить пустой шаблон формы сертификации для иностранного резидента.
     * GET /insurance-service/v2/contracts/print/form/certification
     *
     * @param timeout таймаут ожидания ответа на асинхронный запрос
     * @return 
     * @throws RestClientException в случае неудачи
    */
    public byte[] printFormCertification(long timeout) throws RestClientException {
        return printFormCertification().get(timeout);
    }

    /**
     * Получить пустой шаблон формы сертификации для иностранного резидента. асинхронно
     * GET /insurance-service/v2/contracts/print/form/certification
     *
     * @return 
     * @throws RestClientException в случае неудачи
    */
    public ClientRestResult<byte[]> printFormCertification() throws RestClientException {
        return new ClientRestResult<>(printFormCertificationInternal(), this::processStatusCodeErrors);
    }

    private ListenableFuture<ResponseEntity<byte[]>> printFormCertificationInternal() throws RestClientException {
        

        MicroServiceURIBuilder uriBuilder = JmsUriBuilder.service(applicationName)
            .path(cutComments("/insurance-service/v2/contracts/print/form/certification"));

        RequestEntity requestEntity = RequestEntity
                  .method(HttpMethod.GET, uriBuilder.build())
                  .build();
        return microServiceTemplate.exchange(requestEntity,
                    new ParameterizedTypeReference<byte[]>(){});
    }

    /**
     * Обновить экземпляр договора страхования.
     * PUT /insurance-service/v2/contracts/{id}
     *
     * @param id Идентификатор экземпляра договора страхования (required)
     * @param updateContractRequest Запрос обновления экземпляра договора страхования (required)
     * @param timeout таймаут ожидания ответа на асинхронный запрос
     * @throws RestClientException в случае неудачи
    */
    public Void putContractV2(Long id, BaseInsuranceModel updateContractRequest, long timeout) throws RestClientException {
        return putContractV2(id, updateContractRequest).get(timeout);
    }

    /**
     * Обновить экземпляр договора страхования. асинхронно
     * PUT /insurance-service/v2/contracts/{id}
     *
     * @param id Идентификатор экземпляра договора страхования (required)
     * @param updateContractRequest Запрос обновления экземпляра договора страхования (required)
     * @throws RestClientException в случае неудачи
    */
    public ClientRestResult<Void> putContractV2(Long id, BaseInsuranceModel updateContractRequest) throws RestClientException {
        return new ClientRestResult<>(putContractV2Internal(id, updateContractRequest), this::processStatusCodeErrors);
    }

    private ListenableFuture<ResponseEntity<Void>> putContractV2Internal(Long id, BaseInsuranceModel updateContractRequest) throws RestClientException {
        if (id == null)
            throw new RestClientException(String.format(REQUIRED_PARAM_ERROR, "id", "putContractV2"));
        if (updateContractRequest == null)
            throw new RestClientException(String.format(REQUIRED_PARAM_ERROR, "updateContractRequest", "putContractV2"));
        

        MicroServiceURIBuilder uriBuilder = JmsUriBuilder.service(applicationName)
            .path(cutComments("/insurance-service/v2/contracts/{id}")).variable("id", id);

        RequestEntity requestEntity = RequestEntity
                  .method(HttpMethod.PUT, uriBuilder.build())
                  .body(updateContractRequest);
        return microServiceTemplate.exchange(requestEntity,
                    new ParameterizedTypeReference<Void>(){});
    }

    /**
     * Установить индивидуальный курс валюты для договора
     * POST /insurance-service/v1/contract/{insuranceId}/setRate
     *
     * @param insuranceId Идентификатор договора страхования (required)
     * @param setIndividualRateRq Структура запроса на установку индивидуального курса валют для договора (required)
     * @param timeout таймаут ожидания ответа на асинхронный запрос
     * @throws RestClientException в случае неудачи
    */
    public Void setIndividualRate(Long insuranceId, IndividualRateRq setIndividualRateRq, long timeout) throws RestClientException {
        return setIndividualRate(insuranceId, setIndividualRateRq).get(timeout);
    }

    /**
     * Установить индивидуальный курс валюты для договора асинхронно
     * POST /insurance-service/v1/contract/{insuranceId}/setRate
     *
     * @param insuranceId Идентификатор договора страхования (required)
     * @param setIndividualRateRq Структура запроса на установку индивидуального курса валют для договора (required)
     * @throws RestClientException в случае неудачи
    */
    public ClientRestResult<Void> setIndividualRate(Long insuranceId, IndividualRateRq setIndividualRateRq) throws RestClientException {
        return new ClientRestResult<>(setIndividualRateInternal(insuranceId, setIndividualRateRq), this::processStatusCodeErrors);
    }

    private ListenableFuture<ResponseEntity<Void>> setIndividualRateInternal(Long insuranceId, IndividualRateRq setIndividualRateRq) throws RestClientException {
        if (insuranceId == null)
            throw new RestClientException(String.format(REQUIRED_PARAM_ERROR, "insuranceId", "setIndividualRate"));
        if (setIndividualRateRq == null)
            throw new RestClientException(String.format(REQUIRED_PARAM_ERROR, "setIndividualRateRq", "setIndividualRate"));
        

        MicroServiceURIBuilder uriBuilder = JmsUriBuilder.service(applicationName)
            .path(cutComments("/insurance-service/v1/contract/{insuranceId}/setRate")).variable("insuranceId", insuranceId);

        RequestEntity requestEntity = RequestEntity
                  .method(HttpMethod.POST, uriBuilder.build())
                  .body(setIndividualRateRq);
        return microServiceTemplate.exchange(requestEntity,
                    new ParameterizedTypeReference<Void>(){});
    }

    /**
     * Обновить экземпляр договора страхования и установить новый статус.
     * POST /insurance-service/v2/contracts/{id}/setStatus
     *
     * @param id Идентификатор экземпляра договора страхования (required)
     * @param setStatusContractRequest Запрос обновления экземпляра договора страхования (required)
     * @param timeout таймаут ожидания ответа на асинхронный запрос
     * @throws RestClientException в случае неудачи
    */
    public Void setStatusContractV2(Long id, SetStatusInsuranceModel setStatusContractRequest, long timeout) throws RestClientException {
        return setStatusContractV2(id, setStatusContractRequest).get(timeout);
    }

    /**
     * Обновить экземпляр договора страхования и установить новый статус. асинхронно
     * POST /insurance-service/v2/contracts/{id}/setStatus
     *
     * @param id Идентификатор экземпляра договора страхования (required)
     * @param setStatusContractRequest Запрос обновления экземпляра договора страхования (required)
     * @throws RestClientException в случае неудачи
    */
    public ClientRestResult<Void> setStatusContractV2(Long id, SetStatusInsuranceModel setStatusContractRequest) throws RestClientException {
        return new ClientRestResult<>(setStatusContractV2Internal(id, setStatusContractRequest), this::processStatusCodeErrors);
    }

    private ListenableFuture<ResponseEntity<Void>> setStatusContractV2Internal(Long id, SetStatusInsuranceModel setStatusContractRequest) throws RestClientException {
        if (id == null)
            throw new RestClientException(String.format(REQUIRED_PARAM_ERROR, "id", "setStatusContractV2"));
        if (setStatusContractRequest == null)
            throw new RestClientException(String.format(REQUIRED_PARAM_ERROR, "setStatusContractRequest", "setStatusContractV2"));
        

        MicroServiceURIBuilder uriBuilder = JmsUriBuilder.service(applicationName)
            .path(cutComments("/insurance-service/v2/contracts/{id}/setStatus")).variable("id", id);

        RequestEntity requestEntity = RequestEntity
                  .method(HttpMethod.POST, uriBuilder.build())
                  .body(setStatusContractRequest);
        return microServiceTemplate.exchange(requestEntity,
                    new ParameterizedTypeReference<Void>(){});
    }
    private String cutComments(String path) {
        return path.split("#", 2)[0];
    }

    private void addPageableParams(MicroServiceURIBuilder builder, Pageable pageable) {
        if (pageable != null) {
            builder.param("page", pageable.getPageNumber());
            builder.param("size", pageable.getPageSize());
            Sort sort = pageable.getSort();
            if (sort != null) {
                List<String> sortParams = new ArrayList<>();
                for (Sort.Order next : sort) {
                    sortParams.add(next.getProperty());
                }
                sortParams.add(sort.getOrderFor(sortParams.get(0)).getDirection().name());
                builder.param("sort", String.join(",", sortParams));
            }
        }
    }

    private void processStatusCodeErrors(Exception e) throws RestClientException {
            HttpStatus statusCode = RestUtils.getStatusCode(e);
            if (statusCode != null) {
                switch (statusCode) {
                    case INTERNAL_SERVER_ERROR:
                        throw new RestClientException(String.format(STATUS_CODE_TEMPLATE, HttpStatus.INTERNAL_SERVER_ERROR.toString()));
                    case CONFLICT:
                        throw new EntityExistsException();
                    case NOT_FOUND:
                        throw new NotFoundException();
                }
            }
            throw new RestClientException(e.toString());
    }
}
