/*
 * API микросервиса управления договорами страхования
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package ru.softlab.efr.services.insurance;

import java.math.BigDecimal;
import ru.softlab.efr.services.insurance.model.rest.StrategyData;

import ru.softlab.efr.infrastructure.transport.client.*;
import ru.softlab.efr.common.utilities.rest.*;
import ru.softlab.efr.common.utilities.rest.client.*;
import ru.softlab.efr.common.utilities.rest.converters.DateParser;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;

import ru.softlab.efr.infrastructure.transport.client.impl.JmsUriBuilder;

import org.springframework.core.ParameterizedTypeReference;
import org.springframework.http.*;
import org.springframework.util.*;
import org.springframework.util.concurrent.ListenableFuture;
import org.springframework.stereotype.Component;

import java.util.*;

/**
 * Содержит методы для взаимодействия с приложением insurance-service
 **/
@Component
public class StrategiesClient {
    private static final String REQUIRED_PARAM_ERROR = "Не указан обязательный параметр '%s' при вызове %s";
    private String applicationName;
    private static final String STATUS_CODE_TEMPLATE = "status code: [%s]";

    private final MicroServiceTemplate microServiceTemplate;

    /**
     * Возвращяет экземпляр класса
     * @param microServiceTemplate - объект, реализующий интерфейс {@link MicroServiceTemplate}
     */
    public StrategiesClient(MicroServiceTemplate microServiceTemplate) {
        this.microServiceTemplate = microServiceTemplate;
        this.applicationName = "insurance-service";
    }


    /**
     * Создать запись справочника стратегий
     * POST /insurance-service/v1/dict/strategy
     *
     * @param createStrategyRq Запрос создания записи в справочнике стратегий. (required)
     * @param timeout таймаут ожидания ответа на асинхронный запрос
     * @return Стратегия программ страхования из справочника
     * @throws RestClientException в случае неудачи
    */
    public StrategyData createStrategy(StrategyData createStrategyRq, long timeout) throws RestClientException {
        return createStrategy(createStrategyRq).get(timeout);
    }

    /**
     * Создать запись справочника стратегий асинхронно
     * POST /insurance-service/v1/dict/strategy
     *
     * @param createStrategyRq Запрос создания записи в справочнике стратегий. (required)
     * @return Стратегия программ страхования из справочника
     * @throws RestClientException в случае неудачи
    */
    public ClientRestResult<StrategyData> createStrategy(StrategyData createStrategyRq) throws RestClientException {
        return new ClientRestResult<>(createStrategyInternal(createStrategyRq), this::processStatusCodeErrors);
    }

    private ListenableFuture<ResponseEntity<StrategyData>> createStrategyInternal(StrategyData createStrategyRq) throws RestClientException {
        if (createStrategyRq == null)
            throw new RestClientException(String.format(REQUIRED_PARAM_ERROR, "createStrategyRq", "createStrategy"));
        

        MicroServiceURIBuilder uriBuilder = JmsUriBuilder.service(applicationName)
            .path(cutComments("/insurance-service/v1/dict/strategy"));

        RequestEntity requestEntity = RequestEntity
                  .method(HttpMethod.POST, uriBuilder.build())
                  .body(createStrategyRq);
        return microServiceTemplate.exchange(requestEntity,
                    new ParameterizedTypeReference<StrategyData>(){});
    }

    /**
     * Удалить запись справочника стратегий по идентификатору
     * DELETE /insurance-service/v1/dict/strategy/{id}
     *
     * @param id Идентификатор записи в справочнике стратегий. (required)
     * @param timeout таймаут ожидания ответа на асинхронный запрос
     * @throws RestClientException в случае неудачи
    */
    public Void deleteStrategy(Long id, long timeout) throws RestClientException {
        return deleteStrategy(id).get(timeout);
    }

    /**
     * Удалить запись справочника стратегий по идентификатору асинхронно
     * DELETE /insurance-service/v1/dict/strategy/{id}
     *
     * @param id Идентификатор записи в справочнике стратегий. (required)
     * @throws RestClientException в случае неудачи
    */
    public ClientRestResult<Void> deleteStrategy(Long id) throws RestClientException {
        return new ClientRestResult<>(deleteStrategyInternal(id), this::processStatusCodeErrors);
    }

    private ListenableFuture<ResponseEntity<Void>> deleteStrategyInternal(Long id) throws RestClientException {
        if (id == null)
            throw new RestClientException(String.format(REQUIRED_PARAM_ERROR, "id", "deleteStrategy"));
        

        MicroServiceURIBuilder uriBuilder = JmsUriBuilder.service(applicationName)
            .path(cutComments("/insurance-service/v1/dict/strategy/{id}")).variable("id", id);

        RequestEntity requestEntity = RequestEntity
                  .method(HttpMethod.DELETE, uriBuilder.build())
                  .build();
        return microServiceTemplate.exchange(requestEntity,
                    new ParameterizedTypeReference<Void>(){});
    }

    /**
     * Получить запись справочника стратегий по идентификатору
     * GET /insurance-service/v1/dict/strategy/{id}
     *
     * @param id Идентификатор записи в справочнике стратегий. (required)
     * @param timeout таймаут ожидания ответа на асинхронный запрос
     * @return Стратегия программ страхования из справочника
     * @throws RestClientException в случае неудачи
    */
    public StrategyData getStrategyById(Long id, long timeout) throws RestClientException {
        return getStrategyById(id).get(timeout);
    }

    /**
     * Получить запись справочника стратегий по идентификатору асинхронно
     * GET /insurance-service/v1/dict/strategy/{id}
     *
     * @param id Идентификатор записи в справочнике стратегий. (required)
     * @return Стратегия программ страхования из справочника
     * @throws RestClientException в случае неудачи
    */
    public ClientRestResult<StrategyData> getStrategyById(Long id) throws RestClientException {
        return new ClientRestResult<>(getStrategyByIdInternal(id), this::processStatusCodeErrors);
    }

    private ListenableFuture<ResponseEntity<StrategyData>> getStrategyByIdInternal(Long id) throws RestClientException {
        if (id == null)
            throw new RestClientException(String.format(REQUIRED_PARAM_ERROR, "id", "getStrategyById"));
        

        MicroServiceURIBuilder uriBuilder = JmsUriBuilder.service(applicationName)
            .path(cutComments("/insurance-service/v1/dict/strategy/{id}")).variable("id", id);

        RequestEntity requestEntity = RequestEntity
                  .method(HttpMethod.GET, uriBuilder.build())
                  .build();
        return microServiceTemplate.exchange(requestEntity,
                    new ParameterizedTypeReference<StrategyData>(){});
    }

    /**
     * Получить список всех записей справочника стратегий.
     * GET /insurance-service/v1/dict/strategies
     *
     * @param timeout таймаут ожидания ответа на асинхронный запрос
     * @return Постраничный вывод данных справочника
     * @throws RestClientException в случае неудачи
    */
    public RestPageImpl<StrategyData> getStrategyList(Pageable pageable, long timeout) throws RestClientException {
        return getStrategyList(pageable).get(timeout);
    }

    /**
     * Получить список всех записей справочника стратегий. асинхронно
     * GET /insurance-service/v1/dict/strategies
     *
     * @return Постраничный вывод данных справочника
     * @throws RestClientException в случае неудачи
    */
    public ClientRestResult<RestPageImpl<StrategyData>> getStrategyList(Pageable pageable) throws RestClientException {
        return new ClientRestResult<>(getStrategyListInternal(pageable), this::processStatusCodeErrors);
    }

    private ListenableFuture<ResponseEntity<RestPageImpl<StrategyData>>> getStrategyListInternal(Pageable pageable) throws RestClientException {
        

        MicroServiceURIBuilder uriBuilder = JmsUriBuilder.service(applicationName)
            .path(cutComments("/insurance-service/v1/dict/strategies"));

        addPageableParams(uriBuilder, pageable);
        RequestEntity requestEntity = RequestEntity
                  .method(HttpMethod.GET, uriBuilder.build())
                  .build();
        return microServiceTemplate.exchange(requestEntity,
                    new ParameterizedTypeReference<RestPageImpl<StrategyData>>(){});
    }

    /**
     * Получить список записей справочника стратегий по коэффициенту участия.
     * PUT /insurance-service/v1/dict/strategies
     *
     * @param coefficient Коэффициент участия (required)
     * @param timeout таймаут ожидания ответа на асинхронный запрос
     * @return Вывод данных справочника
     * @throws RestClientException в случае неудачи
    */
    public List<StrategyData> getStrategyListByRate(BigDecimal coefficient, long timeout) throws RestClientException {
        return getStrategyListByRate(coefficient).get(timeout);
    }

    /**
     * Получить список записей справочника стратегий по коэффициенту участия. асинхронно
     * PUT /insurance-service/v1/dict/strategies
     *
     * @param coefficient Коэффициент участия (required)
     * @return Вывод данных справочника
     * @throws RestClientException в случае неудачи
    */
    public ClientRestResult<List<StrategyData>> getStrategyListByRate(BigDecimal coefficient) throws RestClientException {
        return new ClientRestResult<>(getStrategyListByRateInternal(coefficient), this::processStatusCodeErrors);
    }

    private ListenableFuture<ResponseEntity<List<StrategyData>>> getStrategyListByRateInternal(BigDecimal coefficient) throws RestClientException {
        if (coefficient == null)
            throw new RestClientException(String.format(REQUIRED_PARAM_ERROR, "coefficient", "getStrategyListByRate"));
        

        MicroServiceURIBuilder uriBuilder = JmsUriBuilder.service(applicationName)
            .path(cutComments("/insurance-service/v1/dict/strategies"));

        if (coefficient != null)
            uriBuilder.param("coefficient", coefficient);
        RequestEntity requestEntity = RequestEntity
                  .method(HttpMethod.PUT, uriBuilder.build())
                  .build();
        return microServiceTemplate.exchange(requestEntity,
                    new ParameterizedTypeReference<List<StrategyData>>(){});
    }

    /**
     * Обновить запись справочника стратегий по идентификатору
     * PUT /insurance-service/v1/dict/strategy/{id}
     *
     * @param id Идентификатор записи в справочнике стратегий. (required)
     * @param updateStrategyRq Запрос обновления записи в справочнике стратегий. (required)
     * @param timeout таймаут ожидания ответа на асинхронный запрос
     * @return Стратегия программ страхования из справочника
     * @throws RestClientException в случае неудачи
    */
    public StrategyData updateStrategyById(Long id, StrategyData updateStrategyRq, long timeout) throws RestClientException {
        return updateStrategyById(id, updateStrategyRq).get(timeout);
    }

    /**
     * Обновить запись справочника стратегий по идентификатору асинхронно
     * PUT /insurance-service/v1/dict/strategy/{id}
     *
     * @param id Идентификатор записи в справочнике стратегий. (required)
     * @param updateStrategyRq Запрос обновления записи в справочнике стратегий. (required)
     * @return Стратегия программ страхования из справочника
     * @throws RestClientException в случае неудачи
    */
    public ClientRestResult<StrategyData> updateStrategyById(Long id, StrategyData updateStrategyRq) throws RestClientException {
        return new ClientRestResult<>(updateStrategyByIdInternal(id, updateStrategyRq), this::processStatusCodeErrors);
    }

    private ListenableFuture<ResponseEntity<StrategyData>> updateStrategyByIdInternal(Long id, StrategyData updateStrategyRq) throws RestClientException {
        if (id == null)
            throw new RestClientException(String.format(REQUIRED_PARAM_ERROR, "id", "updateStrategyById"));
        if (updateStrategyRq == null)
            throw new RestClientException(String.format(REQUIRED_PARAM_ERROR, "updateStrategyRq", "updateStrategyById"));
        

        MicroServiceURIBuilder uriBuilder = JmsUriBuilder.service(applicationName)
            .path(cutComments("/insurance-service/v1/dict/strategy/{id}")).variable("id", id);

        RequestEntity requestEntity = RequestEntity
                  .method(HttpMethod.PUT, uriBuilder.build())
                  .body(updateStrategyRq);
        return microServiceTemplate.exchange(requestEntity,
                    new ParameterizedTypeReference<StrategyData>(){});
    }
    private String cutComments(String path) {
        return path.split("#", 2)[0];
    }

    private void addPageableParams(MicroServiceURIBuilder builder, Pageable pageable) {
        if (pageable != null) {
            builder.param("page", pageable.getPageNumber());
            builder.param("size", pageable.getPageSize());
            Sort sort = pageable.getSort();
            if (sort != null) {
                List<String> sortParams = new ArrayList<>();
                for (Sort.Order next : sort) {
                    sortParams.add(next.getProperty());
                }
                sortParams.add(sort.getOrderFor(sortParams.get(0)).getDirection().name());
                builder.param("sort", String.join(",", sortParams));
            }
        }
    }

    private void processStatusCodeErrors(Exception e) throws RestClientException {
            HttpStatus statusCode = RestUtils.getStatusCode(e);
            if (statusCode != null) {
                switch (statusCode) {
                    case INTERNAL_SERVER_ERROR:
                        throw new RestClientException(String.format(STATUS_CODE_TEMPLATE, HttpStatus.INTERNAL_SERVER_ERROR.toString()));
                    case CONFLICT:
                        throw new EntityExistsException();
                    case NOT_FOUND:
                        throw new NotFoundException();
                }
            }
            throw new RestClientException(e.toString());
    }
}
