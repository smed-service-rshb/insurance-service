/*
 * API микросервиса управления договорами страхования
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package ru.softlab.efr.services.insurance;

import ru.softlab.efr.services.insurance.model.rest.ClientRequestInfo;
import ru.softlab.efr.services.insurance.model.rest.ClientRequestInfoForAdmin;
import ru.softlab.efr.services.insurance.model.rest.ClientRequestRq;
import ru.softlab.efr.services.insurance.model.rest.ErrorModel;
import ru.softlab.efr.services.insurance.model.rest.FilterRequestsRq;
import ru.softlab.efr.services.insurance.model.rest.ProcessingClientRequestRq;
import ru.softlab.efr.services.insurance.model.rest.UserRequestResponse;

import ru.softlab.efr.infrastructure.transport.client.*;
import ru.softlab.efr.common.utilities.rest.*;
import ru.softlab.efr.common.utilities.rest.client.*;
import ru.softlab.efr.common.utilities.rest.converters.DateParser;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;

import ru.softlab.efr.infrastructure.transport.client.impl.JmsUriBuilder;

import org.springframework.core.ParameterizedTypeReference;
import org.springframework.http.*;
import org.springframework.util.*;
import org.springframework.util.concurrent.ListenableFuture;
import org.springframework.stereotype.Component;

import java.util.*;

/**
 * Содержит методы для взаимодействия с приложением insurance-service
 **/
@Component
public class RequestClient {
    private static final String REQUIRED_PARAM_ERROR = "Не указан обязательный параметр '%s' при вызове %s";
    private String applicationName;
    private static final String STATUS_CODE_TEMPLATE = "status code: [%s]";

    private final MicroServiceTemplate microServiceTemplate;

    /**
     * Возвращяет экземпляр класса
     * @param microServiceTemplate - объект, реализующий интерфейс {@link MicroServiceTemplate}
     */
    public RequestClient(MicroServiceTemplate microServiceTemplate) {
        this.microServiceTemplate = microServiceTemplate;
        this.applicationName = "insurance-service";
    }


    /**
     * Создать обращение клиента от имени текущего авторизованного клиента
     * POST /insurance-service/v2/client-request
     *
     * @param createClientRequest Запрос создания обращения (required)
     * @param timeout таймаут ожидания ответа на асинхронный запрос
     * @return 
     * @throws RestClientException в случае неудачи
    */
    public ClientRequestInfo addRequest(ClientRequestRq createClientRequest, long timeout) throws RestClientException {
        return addRequest(createClientRequest).get(timeout);
    }

    /**
     * Создать обращение клиента от имени текущего авторизованного клиента асинхронно
     * POST /insurance-service/v2/client-request
     *
     * @param createClientRequest Запрос создания обращения (required)
     * @return 
     * @throws RestClientException в случае неудачи
    */
    public ClientRestResult<ClientRequestInfo> addRequest(ClientRequestRq createClientRequest) throws RestClientException {
        return new ClientRestResult<>(addRequestInternal(createClientRequest), this::processStatusCodeErrors);
    }

    private ListenableFuture<ResponseEntity<ClientRequestInfo>> addRequestInternal(ClientRequestRq createClientRequest) throws RestClientException {
        if (createClientRequest == null)
            throw new RestClientException(String.format(REQUIRED_PARAM_ERROR, "createClientRequest", "addRequest"));
        

        MicroServiceURIBuilder uriBuilder = JmsUriBuilder.service(applicationName)
            .path(cutComments("/insurance-service/v2/client-request"));

        RequestEntity requestEntity = RequestEntity
                  .method(HttpMethod.POST, uriBuilder.build())
                  .body(createClientRequest);
        return microServiceTemplate.exchange(requestEntity,
                    new ParameterizedTypeReference<ClientRequestInfo>(){});
    }

    /**
     * Закрыть обращение клиента
     * POST /insurance-service/v2/client-request/{requestId}/close
     *
     * @param requestId Идентификатор обращения клиента (required)
     * @param timeout таймаут ожидания ответа на асинхронный запрос
     * @return 
     * @throws RestClientException в случае неудачи
    */
    public String closeRequest(Long requestId, long timeout) throws RestClientException {
        return closeRequest(requestId).get(timeout);
    }

    /**
     * Закрыть обращение клиента асинхронно
     * POST /insurance-service/v2/client-request/{requestId}/close
     *
     * @param requestId Идентификатор обращения клиента (required)
     * @return 
     * @throws RestClientException в случае неудачи
    */
    public ClientRestResult<String> closeRequest(Long requestId) throws RestClientException {
        return new ClientRestResult<>(closeRequestInternal(requestId), this::processStatusCodeErrors);
    }

    private ListenableFuture<ResponseEntity<String>> closeRequestInternal(Long requestId) throws RestClientException {
        if (requestId == null)
            throw new RestClientException(String.format(REQUIRED_PARAM_ERROR, "requestId", "closeRequest"));
        

        MicroServiceURIBuilder uriBuilder = JmsUriBuilder.service(applicationName)
            .path(cutComments("/insurance-service/v2/client-request/{requestId}/close")).variable("requestId", requestId);

        RequestEntity requestEntity = RequestEntity
                  .method(HttpMethod.POST, uriBuilder.build())
                  .build();
        return microServiceTemplate.exchange(requestEntity,
                    new ParameterizedTypeReference<String>(){});
    }

    /**
     * Получить список обращений для текущего авторизованного клиента
     * GET /insurance-service/v2/client-request
     *
     * @param timeout таймаут ожидания ответа на асинхронный запрос
     * @return 
     * @throws RestClientException в случае неудачи
    */
    public RestPageImpl<UserRequestResponse> getClientRequestList(Pageable pageable, long timeout) throws RestClientException {
        return getClientRequestList(pageable).get(timeout);
    }

    /**
     * Получить список обращений для текущего авторизованного клиента асинхронно
     * GET /insurance-service/v2/client-request
     *
     * @return 
     * @throws RestClientException в случае неудачи
    */
    public ClientRestResult<RestPageImpl<UserRequestResponse>> getClientRequestList(Pageable pageable) throws RestClientException {
        return new ClientRestResult<>(getClientRequestListInternal(pageable), this::processStatusCodeErrors);
    }

    private ListenableFuture<ResponseEntity<RestPageImpl<UserRequestResponse>>> getClientRequestListInternal(Pageable pageable) throws RestClientException {
        

        MicroServiceURIBuilder uriBuilder = JmsUriBuilder.service(applicationName)
            .path(cutComments("/insurance-service/v2/client-request"));

        addPageableParams(uriBuilder, pageable);
        RequestEntity requestEntity = RequestEntity
                  .method(HttpMethod.GET, uriBuilder.build())
                  .build();
        return microServiceTemplate.exchange(requestEntity,
                    new ParameterizedTypeReference<RestPageImpl<UserRequestResponse>>(){});
    }

    /**
     * Получить обращение для пользователя по id
     * GET /insurance-service/v2/client-request/{requestId}
     *
     * @param requestId Идентификатор обращения клиента (required)
     * @param timeout таймаут ожидания ответа на асинхронный запрос
     * @return 
     * @throws RestClientException в случае неудачи
    */
    public ClientRequestInfo getRequestById(Long requestId, long timeout) throws RestClientException {
        return getRequestById(requestId).get(timeout);
    }

    /**
     * Получить обращение для пользователя по id асинхронно
     * GET /insurance-service/v2/client-request/{requestId}
     *
     * @param requestId Идентификатор обращения клиента (required)
     * @return 
     * @throws RestClientException в случае неудачи
    */
    public ClientRestResult<ClientRequestInfo> getRequestById(Long requestId) throws RestClientException {
        return new ClientRestResult<>(getRequestByIdInternal(requestId), this::processStatusCodeErrors);
    }

    private ListenableFuture<ResponseEntity<ClientRequestInfo>> getRequestByIdInternal(Long requestId) throws RestClientException {
        if (requestId == null)
            throw new RestClientException(String.format(REQUIRED_PARAM_ERROR, "requestId", "getRequestById"));
        

        MicroServiceURIBuilder uriBuilder = JmsUriBuilder.service(applicationName)
            .path(cutComments("/insurance-service/v2/client-request/{requestId}")).variable("requestId", requestId);

        RequestEntity requestEntity = RequestEntity
                  .method(HttpMethod.GET, uriBuilder.build())
                  .build();
        return microServiceTemplate.exchange(requestEntity,
                    new ParameterizedTypeReference<ClientRequestInfo>(){});
    }

    /**
     * Получить экземпляр обращения клиента по идентификатору
     * GET /insurance-service/v2/client-request/{requestId}/get
     *
     * @param requestId Идентификатор обращения клиента. (required)
     * @param timeout таймаут ожидания ответа на асинхронный запрос
     * @return 
     * @throws RestClientException в случае неудачи
    */
    public ClientRequestInfoForAdmin getRequestByIdForAdmin(Long requestId, long timeout) throws RestClientException {
        return getRequestByIdForAdmin(requestId).get(timeout);
    }

    /**
     * Получить экземпляр обращения клиента по идентификатору асинхронно
     * GET /insurance-service/v2/client-request/{requestId}/get
     *
     * @param requestId Идентификатор обращения клиента. (required)
     * @return 
     * @throws RestClientException в случае неудачи
    */
    public ClientRestResult<ClientRequestInfoForAdmin> getRequestByIdForAdmin(Long requestId) throws RestClientException {
        return new ClientRestResult<>(getRequestByIdForAdminInternal(requestId), this::processStatusCodeErrors);
    }

    private ListenableFuture<ResponseEntity<ClientRequestInfoForAdmin>> getRequestByIdForAdminInternal(Long requestId) throws RestClientException {
        if (requestId == null)
            throw new RestClientException(String.format(REQUIRED_PARAM_ERROR, "requestId", "getRequestByIdForAdmin"));
        

        MicroServiceURIBuilder uriBuilder = JmsUriBuilder.service(applicationName)
            .path(cutComments("/insurance-service/v2/client-request/{requestId}/get")).variable("requestId", requestId);

        RequestEntity requestEntity = RequestEntity
                  .method(HttpMethod.GET, uriBuilder.build())
                  .build();
        return microServiceTemplate.exchange(requestEntity,
                    new ParameterizedTypeReference<ClientRequestInfoForAdmin>(){});
    }

    /**
     * Получить список всех экземпляров обращений клиентов (с фильтрацией) для админа.
     * PUT /insurance-service/v2/client-request
     *
     * @param filterData Тело запроса с данными фильтрации (optional)
     * @param hasFilter Признак фильтрации обращений (optional)
     * @param timeout таймаут ожидания ответа на асинхронный запрос
     * @return Постраничный вывод договоров
     * @throws RestClientException в случае неудачи
    */
    public RestPageImpl<ClientRequestInfoForAdmin> getRequestPaginatedList(Pageable pageable, FilterRequestsRq filterData, Boolean hasFilter, long timeout) throws RestClientException {
        return getRequestPaginatedList(pageable, filterData, hasFilter).get(timeout);
    }

    /**
     * Получить список всех экземпляров обращений клиентов (с фильтрацией) для админа. асинхронно
     * PUT /insurance-service/v2/client-request
     *
     * @param filterData Тело запроса с данными фильтрации (optional)
     * @param hasFilter Признак фильтрации обращений (optional)
     * @return Постраничный вывод договоров
     * @throws RestClientException в случае неудачи
    */
    public ClientRestResult<RestPageImpl<ClientRequestInfoForAdmin>> getRequestPaginatedList(Pageable pageable, FilterRequestsRq filterData, Boolean hasFilter) throws RestClientException {
        return new ClientRestResult<>(getRequestPaginatedListInternal(pageable, filterData, hasFilter), this::processStatusCodeErrors);
    }

    private ListenableFuture<ResponseEntity<RestPageImpl<ClientRequestInfoForAdmin>>> getRequestPaginatedListInternal(Pageable pageable, FilterRequestsRq filterData, Boolean hasFilter) throws RestClientException {
        

        MicroServiceURIBuilder uriBuilder = JmsUriBuilder.service(applicationName)
            .path(cutComments("/insurance-service/v2/client-request"));

        addPageableParams(uriBuilder, pageable);
        if (hasFilter != null)
            uriBuilder.param("hasFilter", hasFilter);
        RequestEntity requestEntity = RequestEntity
                  .method(HttpMethod.PUT, uriBuilder.build())
                  .body(filterData);
        return microServiceTemplate.exchange(requestEntity,
                    new ParameterizedTypeReference<RestPageImpl<ClientRequestInfoForAdmin>>(){});
    }

    /**
     * Обработать обращение клиента
     * POST /insurance-service/v2/client-request/{requestId}/processing
     *
     * @param requestId Идентификатор обращения клиента (required)
     * @param body Запрос на обработку обращения (required)
     * @param timeout таймаут ожидания ответа на асинхронный запрос
     * @throws RestClientException в случае неудачи
    */
    public Void processingClientRequest(Long requestId, ProcessingClientRequestRq body, long timeout) throws RestClientException {
        return processingClientRequest(requestId, body).get(timeout);
    }

    /**
     * Обработать обращение клиента асинхронно
     * POST /insurance-service/v2/client-request/{requestId}/processing
     *
     * @param requestId Идентификатор обращения клиента (required)
     * @param body Запрос на обработку обращения (required)
     * @throws RestClientException в случае неудачи
    */
    public ClientRestResult<Void> processingClientRequest(Long requestId, ProcessingClientRequestRq body) throws RestClientException {
        return new ClientRestResult<>(processingClientRequestInternal(requestId, body), this::processStatusCodeErrors);
    }

    private ListenableFuture<ResponseEntity<Void>> processingClientRequestInternal(Long requestId, ProcessingClientRequestRq body) throws RestClientException {
        if (requestId == null)
            throw new RestClientException(String.format(REQUIRED_PARAM_ERROR, "requestId", "processingClientRequest"));
        if (body == null)
            throw new RestClientException(String.format(REQUIRED_PARAM_ERROR, "body", "processingClientRequest"));
        

        MicroServiceURIBuilder uriBuilder = JmsUriBuilder.service(applicationName)
            .path(cutComments("/insurance-service/v2/client-request/{requestId}/processing")).variable("requestId", requestId);

        RequestEntity requestEntity = RequestEntity
                  .method(HttpMethod.POST, uriBuilder.build())
                  .body(body);
        return microServiceTemplate.exchange(requestEntity,
                    new ParameterizedTypeReference<Void>(){});
    }
    private String cutComments(String path) {
        return path.split("#", 2)[0];
    }

    private void addPageableParams(MicroServiceURIBuilder builder, Pageable pageable) {
        if (pageable != null) {
            builder.param("page", pageable.getPageNumber());
            builder.param("size", pageable.getPageSize());
            Sort sort = pageable.getSort();
            if (sort != null) {
                List<String> sortParams = new ArrayList<>();
                for (Sort.Order next : sort) {
                    sortParams.add(next.getProperty());
                }
                sortParams.add(sort.getOrderFor(sortParams.get(0)).getDirection().name());
                builder.param("sort", String.join(",", sortParams));
            }
        }
    }

    private void processStatusCodeErrors(Exception e) throws RestClientException {
            HttpStatus statusCode = RestUtils.getStatusCode(e);
            if (statusCode != null) {
                switch (statusCode) {
                    case INTERNAL_SERVER_ERROR:
                        throw new RestClientException(String.format(STATUS_CODE_TEMPLATE, HttpStatus.INTERNAL_SERVER_ERROR.toString()));
                    case CONFLICT:
                        throw new EntityExistsException();
                    case NOT_FOUND:
                        throw new NotFoundException();
                }
            }
            throw new RestClientException(e.toString());
    }
}
