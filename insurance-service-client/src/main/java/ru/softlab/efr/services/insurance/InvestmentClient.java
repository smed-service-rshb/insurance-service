/*
 * API микросервиса управления договорами страхования
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package ru.softlab.efr.services.insurance;

import ru.softlab.efr.services.insurance.model.rest.InvestmentIncomeDataRs;
import ru.softlab.efr.services.insurance.model.rest.SharesDataRs;

import ru.softlab.efr.infrastructure.transport.client.*;
import ru.softlab.efr.common.utilities.rest.*;
import ru.softlab.efr.common.utilities.rest.client.*;
import ru.softlab.efr.common.utilities.rest.converters.DateParser;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;

import ru.softlab.efr.infrastructure.transport.client.impl.JmsUriBuilder;

import org.springframework.core.ParameterizedTypeReference;
import org.springframework.http.*;
import org.springframework.util.*;
import org.springframework.util.concurrent.ListenableFuture;
import org.springframework.stereotype.Component;

import java.util.*;

/**
 * Содержит методы для взаимодействия с приложением insurance-service
 **/
@Component
public class InvestmentClient {
    private static final String REQUIRED_PARAM_ERROR = "Не указан обязательный параметр '%s' при вызове %s";
    private String applicationName;
    private static final String STATUS_CODE_TEMPLATE = "status code: [%s]";

    private final MicroServiceTemplate microServiceTemplate;

    /**
     * Возвращяет экземпляр класса
     * @param microServiceTemplate - объект, реализующий интерфейс {@link MicroServiceTemplate}
     */
    public InvestmentClient(MicroServiceTemplate microServiceTemplate) {
        this.microServiceTemplate = microServiceTemplate;
        this.applicationName = "insurance-service";
    }


    /**
     * Получить информацию о динамике инвестиционного дохода
     * GET /insurance-service/v1/investment/incomes
     *
     * @param contractId Идентификатор договора (required)
     * @param timeout таймаут ожидания ответа на асинхронный запрос
     * @return Список с данными инвестиционного дохода.
     * @throws RestClientException в случае неудачи
    */
    public InvestmentIncomeDataRs getInvestmentIncome(Long contractId, long timeout) throws RestClientException {
        return getInvestmentIncome(contractId).get(timeout);
    }

    /**
     * Получить информацию о динамике инвестиционного дохода асинхронно
     * GET /insurance-service/v1/investment/incomes
     *
     * @param contractId Идентификатор договора (required)
     * @return Список с данными инвестиционного дохода.
     * @throws RestClientException в случае неудачи
    */
    public ClientRestResult<InvestmentIncomeDataRs> getInvestmentIncome(Long contractId) throws RestClientException {
        return new ClientRestResult<>(getInvestmentIncomeInternal(contractId), this::processStatusCodeErrors);
    }

    private ListenableFuture<ResponseEntity<InvestmentIncomeDataRs>> getInvestmentIncomeInternal(Long contractId) throws RestClientException {
        if (contractId == null)
            throw new RestClientException(String.format(REQUIRED_PARAM_ERROR, "contractId", "getInvestmentIncome"));
        

        MicroServiceURIBuilder uriBuilder = JmsUriBuilder.service(applicationName)
            .path(cutComments("/insurance-service/v1/investment/incomes"));

        if (contractId != null)
            uriBuilder.param("contractId", contractId);
        RequestEntity requestEntity = RequestEntity
                  .method(HttpMethod.GET, uriBuilder.build())
                  .build();
        return microServiceTemplate.exchange(requestEntity,
                    new ParameterizedTypeReference<InvestmentIncomeDataRs>(){});
    }

    /**
     * Получить excel файл с данными по базовым активам
     * GET /insurance-service/v1/investment/incomes/report
     *
     * @param contractId Идентификатор договора (required)
     * @param strategyId Идентификатор стратегии (required)
     * @param timeout таймаут ожидания ответа на асинхронный запрос
     * @return 
     * @throws RestClientException в случае неудачи
    */
    public byte[] getInvestmentIncomeReport(Long contractId, Long strategyId, long timeout) throws RestClientException {
        return getInvestmentIncomeReport(contractId, strategyId).get(timeout);
    }

    /**
     * Получить excel файл с данными по базовым активам асинхронно
     * GET /insurance-service/v1/investment/incomes/report
     *
     * @param contractId Идентификатор договора (required)
     * @param strategyId Идентификатор стратегии (required)
     * @return 
     * @throws RestClientException в случае неудачи
    */
    public ClientRestResult<byte[]> getInvestmentIncomeReport(Long contractId, Long strategyId) throws RestClientException {
        return new ClientRestResult<>(getInvestmentIncomeReportInternal(contractId, strategyId), this::processStatusCodeErrors);
    }

    private ListenableFuture<ResponseEntity<byte[]>> getInvestmentIncomeReportInternal(Long contractId, Long strategyId) throws RestClientException {
        if (contractId == null)
            throw new RestClientException(String.format(REQUIRED_PARAM_ERROR, "contractId", "getInvestmentIncomeReport"));
        if (strategyId == null)
            throw new RestClientException(String.format(REQUIRED_PARAM_ERROR, "strategyId", "getInvestmentIncomeReport"));
        

        MicroServiceURIBuilder uriBuilder = JmsUriBuilder.service(applicationName)
            .path(cutComments("/insurance-service/v1/investment/incomes/report"));

        if (contractId != null)
            uriBuilder.param("contractId", contractId);
        if (strategyId != null)
            uriBuilder.param("strategyId", strategyId);
        RequestEntity requestEntity = RequestEntity
                  .method(HttpMethod.GET, uriBuilder.build())
                  .build();
        return microServiceTemplate.exchange(requestEntity,
                    new ParameterizedTypeReference<byte[]>(){});
    }

    /**
     * Получить список акций с котировками
     * GET /insurance-service/v1/investment/shares
     *
     * @param contractId Идентификатор договора (required)
     * @param timeout таймаут ожидания ответа на асинхронный запрос
     * @return Список акций с котировками.
     * @throws RestClientException в случае неудачи
    */
    public SharesDataRs getShare(Long contractId, long timeout) throws RestClientException {
        return getShare(contractId).get(timeout);
    }

    /**
     * Получить список акций с котировками асинхронно
     * GET /insurance-service/v1/investment/shares
     *
     * @param contractId Идентификатор договора (required)
     * @return Список акций с котировками.
     * @throws RestClientException в случае неудачи
    */
    public ClientRestResult<SharesDataRs> getShare(Long contractId) throws RestClientException {
        return new ClientRestResult<>(getShareInternal(contractId), this::processStatusCodeErrors);
    }

    private ListenableFuture<ResponseEntity<SharesDataRs>> getShareInternal(Long contractId) throws RestClientException {
        if (contractId == null)
            throw new RestClientException(String.format(REQUIRED_PARAM_ERROR, "contractId", "getShare"));
        

        MicroServiceURIBuilder uriBuilder = JmsUriBuilder.service(applicationName)
            .path(cutComments("/insurance-service/v1/investment/shares"));

        if (contractId != null)
            uriBuilder.param("contractId", contractId);
        RequestEntity requestEntity = RequestEntity
                  .method(HttpMethod.GET, uriBuilder.build())
                  .build();
        return microServiceTemplate.exchange(requestEntity,
                    new ParameterizedTypeReference<SharesDataRs>(){});
    }

    /**
     * Получить excel файл отчета по изменений котировок акций
     * GET /insurance-service/v1/investment/shares/report
     *
     * @param contractId Идентификатор договора (required)
     * @param timeout таймаут ожидания ответа на асинхронный запрос
     * @return 
     * @throws RestClientException в случае неудачи
    */
    public byte[] getShareReport(Long contractId, long timeout) throws RestClientException {
        return getShareReport(contractId).get(timeout);
    }

    /**
     * Получить excel файл отчета по изменений котировок акций асинхронно
     * GET /insurance-service/v1/investment/shares/report
     *
     * @param contractId Идентификатор договора (required)
     * @return 
     * @throws RestClientException в случае неудачи
    */
    public ClientRestResult<byte[]> getShareReport(Long contractId) throws RestClientException {
        return new ClientRestResult<>(getShareReportInternal(contractId), this::processStatusCodeErrors);
    }

    private ListenableFuture<ResponseEntity<byte[]>> getShareReportInternal(Long contractId) throws RestClientException {
        if (contractId == null)
            throw new RestClientException(String.format(REQUIRED_PARAM_ERROR, "contractId", "getShareReport"));
        

        MicroServiceURIBuilder uriBuilder = JmsUriBuilder.service(applicationName)
            .path(cutComments("/insurance-service/v1/investment/shares/report"));

        if (contractId != null)
            uriBuilder.param("contractId", contractId);
        RequestEntity requestEntity = RequestEntity
                  .method(HttpMethod.GET, uriBuilder.build())
                  .build();
        return microServiceTemplate.exchange(requestEntity,
                    new ParameterizedTypeReference<byte[]>(){});
    }

    /**
     * Запустить репликацию справочника по базовым индексам
     * GET /insurance-service/v1/investment/baseIndex/load
     *
     * @param timeout таймаут ожидания ответа на асинхронный запрос
     * @throws RestClientException в случае неудачи
    */
    public Void loadBaseIndex(long timeout) throws RestClientException {
        return loadBaseIndex().get(timeout);
    }

    /**
     * Запустить репликацию справочника по базовым индексам асинхронно
     * GET /insurance-service/v1/investment/baseIndex/load
     *
     * @throws RestClientException в случае неудачи
    */
    public ClientRestResult<Void> loadBaseIndex() throws RestClientException {
        return new ClientRestResult<>(loadBaseIndexInternal(), this::processStatusCodeErrors);
    }

    private ListenableFuture<ResponseEntity<Void>> loadBaseIndexInternal() throws RestClientException {
        

        MicroServiceURIBuilder uriBuilder = JmsUriBuilder.service(applicationName)
            .path(cutComments("/insurance-service/v1/investment/baseIndex/load"));

        RequestEntity requestEntity = RequestEntity
                  .method(HttpMethod.GET, uriBuilder.build())
                  .build();
        return microServiceTemplate.exchange(requestEntity,
                    new ParameterizedTypeReference<Void>(){});
    }

    /**
     * Запустить репликацию котировок акций
     * GET /insurance-service/v1/investment/share/load
     *
     * @param timeout таймаут ожидания ответа на асинхронный запрос
     * @throws RestClientException в случае неудачи
    */
    public Void loadShare(long timeout) throws RestClientException {
        return loadShare().get(timeout);
    }

    /**
     * Запустить репликацию котировок акций асинхронно
     * GET /insurance-service/v1/investment/share/load
     *
     * @throws RestClientException в случае неудачи
    */
    public ClientRestResult<Void> loadShare() throws RestClientException {
        return new ClientRestResult<>(loadShareInternal(), this::processStatusCodeErrors);
    }

    private ListenableFuture<ResponseEntity<Void>> loadShareInternal() throws RestClientException {
        

        MicroServiceURIBuilder uriBuilder = JmsUriBuilder.service(applicationName)
            .path(cutComments("/insurance-service/v1/investment/share/load"));

        RequestEntity requestEntity = RequestEntity
                  .method(HttpMethod.GET, uriBuilder.build())
                  .build();
        return microServiceTemplate.exchange(requestEntity,
                    new ParameterizedTypeReference<Void>(){});
    }
    private String cutComments(String path) {
        return path.split("#", 2)[0];
    }

    private void addPageableParams(MicroServiceURIBuilder builder, Pageable pageable) {
        if (pageable != null) {
            builder.param("page", pageable.getPageNumber());
            builder.param("size", pageable.getPageSize());
            Sort sort = pageable.getSort();
            if (sort != null) {
                List<String> sortParams = new ArrayList<>();
                for (Sort.Order next : sort) {
                    sortParams.add(next.getProperty());
                }
                sortParams.add(sort.getOrderFor(sortParams.get(0)).getDirection().name());
                builder.param("sort", String.join(",", sortParams));
            }
        }
    }

    private void processStatusCodeErrors(Exception e) throws RestClientException {
            HttpStatus statusCode = RestUtils.getStatusCode(e);
            if (statusCode != null) {
                switch (statusCode) {
                    case INTERNAL_SERVER_ERROR:
                        throw new RestClientException(String.format(STATUS_CODE_TEMPLATE, HttpStatus.INTERNAL_SERVER_ERROR.toString()));
                    case CONFLICT:
                        throw new EntityExistsException();
                    case NOT_FOUND:
                        throw new NotFoundException();
                }
            }
            throw new RestClientException(e.toString());
    }
}
