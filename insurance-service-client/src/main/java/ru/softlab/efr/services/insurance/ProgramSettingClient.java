/*
 * API микросервиса управления договорами страхования
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package ru.softlab.efr.services.insurance;

import ru.softlab.efr.services.insurance.model.rest.CreateProgramSettingRs;
import ru.softlab.efr.services.insurance.model.rest.ErrorModel;
import ru.softlab.efr.services.insurance.model.rest.FilterProgramSettingsRq;
import ru.softlab.efr.services.insurance.model.rest.FindProgramSettingRq;
import ru.softlab.efr.services.insurance.model.rest.FindProgramSettingRs;
import ru.softlab.efr.services.insurance.model.rest.ProgramSettingData;
import ru.softlab.efr.services.insurance.model.rest.ProgramSettingDataForList;

import ru.softlab.efr.infrastructure.transport.client.*;
import ru.softlab.efr.common.utilities.rest.*;
import ru.softlab.efr.common.utilities.rest.client.*;
import ru.softlab.efr.common.utilities.rest.converters.DateParser;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;

import ru.softlab.efr.infrastructure.transport.client.impl.JmsUriBuilder;

import org.springframework.core.ParameterizedTypeReference;
import org.springframework.http.*;
import org.springframework.util.*;
import org.springframework.util.concurrent.ListenableFuture;
import org.springframework.stereotype.Component;

import java.util.*;

/**
 * Содержит методы для взаимодействия с приложением insurance-service
 **/
@Component
public class ProgramSettingClient {
    private static final String REQUIRED_PARAM_ERROR = "Не указан обязательный параметр '%s' при вызове %s";
    private String applicationName;
    private static final String STATUS_CODE_TEMPLATE = "status code: [%s]";

    private final MicroServiceTemplate microServiceTemplate;

    /**
     * Возвращяет экземпляр класса
     * @param microServiceTemplate - объект, реализующий интерфейс {@link MicroServiceTemplate}
     */
    public ProgramSettingClient(MicroServiceTemplate microServiceTemplate) {
        this.microServiceTemplate = microServiceTemplate;
        this.applicationName = "insurance-service";
    }


    /**
     * Создать запись в справочнике параметров программ страхования.
     * POST /insurance-service/v1/dict/program-settings
     *
     * @param createProgramSettingRq Запрос создания записи в справочнике параметров программ страхования. (required)
     * @param timeout таймаут ожидания ответа на асинхронный запрос
     * @return Результат выполнения создания записи в справочнике параметров программ страхования. Содержит идентификатор созданной записи.
     * @throws RestClientException в случае неудачи
    */
    public CreateProgramSettingRs createProgramSetting(ProgramSettingData createProgramSettingRq, long timeout) throws RestClientException {
        return createProgramSetting(createProgramSettingRq).get(timeout);
    }

    /**
     * Создать запись в справочнике параметров программ страхования. асинхронно
     * POST /insurance-service/v1/dict/program-settings
     *
     * @param createProgramSettingRq Запрос создания записи в справочнике параметров программ страхования. (required)
     * @return Результат выполнения создания записи в справочнике параметров программ страхования. Содержит идентификатор созданной записи.
     * @throws RestClientException в случае неудачи
    */
    public ClientRestResult<CreateProgramSettingRs> createProgramSetting(ProgramSettingData createProgramSettingRq) throws RestClientException {
        return new ClientRestResult<>(createProgramSettingInternal(createProgramSettingRq), this::processStatusCodeErrors);
    }

    private ListenableFuture<ResponseEntity<CreateProgramSettingRs>> createProgramSettingInternal(ProgramSettingData createProgramSettingRq) throws RestClientException {
        if (createProgramSettingRq == null)
            throw new RestClientException(String.format(REQUIRED_PARAM_ERROR, "createProgramSettingRq", "createProgramSetting"));
        

        MicroServiceURIBuilder uriBuilder = JmsUriBuilder.service(applicationName)
            .path(cutComments("/insurance-service/v1/dict/program-settings"));

        RequestEntity requestEntity = RequestEntity
                  .method(HttpMethod.POST, uriBuilder.build())
                  .body(createProgramSettingRq);
        return microServiceTemplate.exchange(requestEntity,
                    new ParameterizedTypeReference<CreateProgramSettingRs>(){});
    }

    /**
     * Удалить набор параметров программы страхования.
     * DELETE /insurance-service/v1/dict/program-settings/{id}
     *
     * @param id Идентификатор набора параметров программы страхования. (required)
     * @param timeout таймаут ожидания ответа на асинхронный запрос
     * @throws RestClientException в случае неудачи
    */
    public Void deleteProgramSetting(Long id, long timeout) throws RestClientException {
        return deleteProgramSetting(id).get(timeout);
    }

    /**
     * Удалить набор параметров программы страхования. асинхронно
     * DELETE /insurance-service/v1/dict/program-settings/{id}
     *
     * @param id Идентификатор набора параметров программы страхования. (required)
     * @throws RestClientException в случае неудачи
    */
    public ClientRestResult<Void> deleteProgramSetting(Long id) throws RestClientException {
        return new ClientRestResult<>(deleteProgramSettingInternal(id), this::processStatusCodeErrors);
    }

    private ListenableFuture<ResponseEntity<Void>> deleteProgramSettingInternal(Long id) throws RestClientException {
        if (id == null)
            throw new RestClientException(String.format(REQUIRED_PARAM_ERROR, "id", "deleteProgramSetting"));
        

        MicroServiceURIBuilder uriBuilder = JmsUriBuilder.service(applicationName)
            .path(cutComments("/insurance-service/v1/dict/program-settings/{id}")).variable("id", id);

        RequestEntity requestEntity = RequestEntity
                  .method(HttpMethod.DELETE, uriBuilder.build())
                  .build();
        return microServiceTemplate.exchange(requestEntity,
                    new ParameterizedTypeReference<Void>(){});
    }

    /**
     * Искать запись в справочнике параметров программ страхования.
     * POST /insurance-service/v1/dict/find/program-settings
     *
     * @param findProgramSettingRq Запрос поиска записи в справочнике параметров программ страхования. (required)
     * @param timeout таймаут ожидания ответа на асинхронный запрос
     * @return Результат выполнения поиска записей в справочнике параметров программ страхования.
     * @throws RestClientException в случае неудачи
    */
    public FindProgramSettingRs findProgramSetting(FindProgramSettingRq findProgramSettingRq, long timeout) throws RestClientException {
        return findProgramSetting(findProgramSettingRq).get(timeout);
    }

    /**
     * Искать запись в справочнике параметров программ страхования. асинхронно
     * POST /insurance-service/v1/dict/find/program-settings
     *
     * @param findProgramSettingRq Запрос поиска записи в справочнике параметров программ страхования. (required)
     * @return Результат выполнения поиска записей в справочнике параметров программ страхования.
     * @throws RestClientException в случае неудачи
    */
    public ClientRestResult<FindProgramSettingRs> findProgramSetting(FindProgramSettingRq findProgramSettingRq) throws RestClientException {
        return new ClientRestResult<>(findProgramSettingInternal(findProgramSettingRq), this::processStatusCodeErrors);
    }

    private ListenableFuture<ResponseEntity<FindProgramSettingRs>> findProgramSettingInternal(FindProgramSettingRq findProgramSettingRq) throws RestClientException {
        if (findProgramSettingRq == null)
            throw new RestClientException(String.format(REQUIRED_PARAM_ERROR, "findProgramSettingRq", "findProgramSetting"));
        

        MicroServiceURIBuilder uriBuilder = JmsUriBuilder.service(applicationName)
            .path(cutComments("/insurance-service/v1/dict/find/program-settings"));

        RequestEntity requestEntity = RequestEntity
                  .method(HttpMethod.POST, uriBuilder.build())
                  .body(findProgramSettingRq);
        return microServiceTemplate.exchange(requestEntity,
                    new ParameterizedTypeReference<FindProgramSettingRs>(){});
    }

    /**
     * Получить набор параметров программы страхования.
     * GET /insurance-service/v1/dict/program-settings/{id}
     *
     * @param id Идентификатор набора параметров программы страхования. (required)
     * @param timeout таймаут ожидания ответа на асинхронный запрос
     * @return Данные набора параметров программы страхования.
     * @throws RestClientException в случае неудачи
    */
    public ProgramSettingData getProgramSettingById(Long id, long timeout) throws RestClientException {
        return getProgramSettingById(id).get(timeout);
    }

    /**
     * Получить набор параметров программы страхования. асинхронно
     * GET /insurance-service/v1/dict/program-settings/{id}
     *
     * @param id Идентификатор набора параметров программы страхования. (required)
     * @return Данные набора параметров программы страхования.
     * @throws RestClientException в случае неудачи
    */
    public ClientRestResult<ProgramSettingData> getProgramSettingById(Long id) throws RestClientException {
        return new ClientRestResult<>(getProgramSettingByIdInternal(id), this::processStatusCodeErrors);
    }

    private ListenableFuture<ResponseEntity<ProgramSettingData>> getProgramSettingByIdInternal(Long id) throws RestClientException {
        if (id == null)
            throw new RestClientException(String.format(REQUIRED_PARAM_ERROR, "id", "getProgramSettingById"));
        

        MicroServiceURIBuilder uriBuilder = JmsUriBuilder.service(applicationName)
            .path(cutComments("/insurance-service/v1/dict/program-settings/{id}")).variable("id", id);

        RequestEntity requestEntity = RequestEntity
                  .method(HttpMethod.GET, uriBuilder.build())
                  .build();
        return microServiceTemplate.exchange(requestEntity,
                    new ParameterizedTypeReference<ProgramSettingData>(){});
    }

    /**
     * Получить список параметров программ страхования.
     * PUT /insurance-service/v1/dict/program-settings
     *
     * @param filterData Тело запроса с данными фильтрации (optional)
     * @param hasFilter Признак фильтрации параметров программ страхования (optional)
     * @param timeout таймаут ожидания ответа на асинхронный запрос
     * @return 
     * @throws RestClientException в случае неудачи
    */
    public RestPageImpl<ProgramSettingDataForList> getProgramSettingList(Pageable pageable, FilterProgramSettingsRq filterData, Boolean hasFilter, long timeout) throws RestClientException {
        return getProgramSettingList(pageable, filterData, hasFilter).get(timeout);
    }

    /**
     * Получить список параметров программ страхования. асинхронно
     * PUT /insurance-service/v1/dict/program-settings
     *
     * @param filterData Тело запроса с данными фильтрации (optional)
     * @param hasFilter Признак фильтрации параметров программ страхования (optional)
     * @return 
     * @throws RestClientException в случае неудачи
    */
    public ClientRestResult<RestPageImpl<ProgramSettingDataForList>> getProgramSettingList(Pageable pageable, FilterProgramSettingsRq filterData, Boolean hasFilter) throws RestClientException {
        return new ClientRestResult<>(getProgramSettingListInternal(pageable, filterData, hasFilter), this::processStatusCodeErrors);
    }

    private ListenableFuture<ResponseEntity<RestPageImpl<ProgramSettingDataForList>>> getProgramSettingListInternal(Pageable pageable, FilterProgramSettingsRq filterData, Boolean hasFilter) throws RestClientException {
        

        MicroServiceURIBuilder uriBuilder = JmsUriBuilder.service(applicationName)
            .path(cutComments("/insurance-service/v1/dict/program-settings"));

        addPageableParams(uriBuilder, pageable);
        if (hasFilter != null)
            uriBuilder.param("hasFilter", hasFilter);
        RequestEntity requestEntity = RequestEntity
                  .method(HttpMethod.PUT, uriBuilder.build())
                  .body(filterData);
        return microServiceTemplate.exchange(requestEntity,
                    new ParameterizedTypeReference<RestPageImpl<ProgramSettingDataForList>>(){});
    }

    /**
     * Обновить набор параметров программы страхования.
     * PUT /insurance-service/v1/dict/program-settings/{id}
     *
     * @param id Идентификатор набора параметров программы страхования. (required)
     * @param updateProgramRequest Запрос обновления набора параметров программы страхования. (required)
     * @param timeout таймаут ожидания ответа на асинхронный запрос
     * @throws RestClientException в случае неудачи
    */
    public Void updateProgramSetting(Long id, ProgramSettingData updateProgramRequest, long timeout) throws RestClientException {
        return updateProgramSetting(id, updateProgramRequest).get(timeout);
    }

    /**
     * Обновить набор параметров программы страхования. асинхронно
     * PUT /insurance-service/v1/dict/program-settings/{id}
     *
     * @param id Идентификатор набора параметров программы страхования. (required)
     * @param updateProgramRequest Запрос обновления набора параметров программы страхования. (required)
     * @throws RestClientException в случае неудачи
    */
    public ClientRestResult<Void> updateProgramSetting(Long id, ProgramSettingData updateProgramRequest) throws RestClientException {
        return new ClientRestResult<>(updateProgramSettingInternal(id, updateProgramRequest), this::processStatusCodeErrors);
    }

    private ListenableFuture<ResponseEntity<Void>> updateProgramSettingInternal(Long id, ProgramSettingData updateProgramRequest) throws RestClientException {
        if (id == null)
            throw new RestClientException(String.format(REQUIRED_PARAM_ERROR, "id", "updateProgramSetting"));
        if (updateProgramRequest == null)
            throw new RestClientException(String.format(REQUIRED_PARAM_ERROR, "updateProgramRequest", "updateProgramSetting"));
        

        MicroServiceURIBuilder uriBuilder = JmsUriBuilder.service(applicationName)
            .path(cutComments("/insurance-service/v1/dict/program-settings/{id}")).variable("id", id);

        RequestEntity requestEntity = RequestEntity
                  .method(HttpMethod.PUT, uriBuilder.build())
                  .body(updateProgramRequest);
        return microServiceTemplate.exchange(requestEntity,
                    new ParameterizedTypeReference<Void>(){});
    }
    private String cutComments(String path) {
        return path.split("#", 2)[0];
    }

    private void addPageableParams(MicroServiceURIBuilder builder, Pageable pageable) {
        if (pageable != null) {
            builder.param("page", pageable.getPageNumber());
            builder.param("size", pageable.getPageSize());
            Sort sort = pageable.getSort();
            if (sort != null) {
                List<String> sortParams = new ArrayList<>();
                for (Sort.Order next : sort) {
                    sortParams.add(next.getProperty());
                }
                sortParams.add(sort.getOrderFor(sortParams.get(0)).getDirection().name());
                builder.param("sort", String.join(",", sortParams));
            }
        }
    }

    private void processStatusCodeErrors(Exception e) throws RestClientException {
            HttpStatus statusCode = RestUtils.getStatusCode(e);
            if (statusCode != null) {
                switch (statusCode) {
                    case INTERNAL_SERVER_ERROR:
                        throw new RestClientException(String.format(STATUS_CODE_TEMPLATE, HttpStatus.INTERNAL_SERVER_ERROR.toString()));
                    case CONFLICT:
                        throw new EntityExistsException();
                    case NOT_FOUND:
                        throw new NotFoundException();
                }
            }
            throw new RestClientException(e.toString());
    }
}
