/*
 * API микросервиса управления договорами страхования
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package ru.softlab.efr.services.insurance;

import ru.softlab.efr.services.insurance.model.rest.CreateProgramResponse;
import ru.softlab.efr.services.insurance.model.rest.ErrorModel;
import ru.softlab.efr.services.insurance.model.rest.FilterProgramsRq;
import ru.softlab.efr.services.insurance.model.rest.ProgramData;

import ru.softlab.efr.infrastructure.transport.client.*;
import ru.softlab.efr.common.utilities.rest.*;
import ru.softlab.efr.common.utilities.rest.client.*;
import ru.softlab.efr.common.utilities.rest.converters.DateParser;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;

import ru.softlab.efr.infrastructure.transport.client.impl.JmsUriBuilder;

import org.springframework.core.ParameterizedTypeReference;
import org.springframework.http.*;
import org.springframework.util.*;
import org.springframework.util.concurrent.ListenableFuture;
import org.springframework.stereotype.Component;

import java.util.*;

/**
 * Содержит методы для взаимодействия с приложением insurance-service
 **/
@Component
public class ProgramClient {
    private static final String REQUIRED_PARAM_ERROR = "Не указан обязательный параметр '%s' при вызове %s";
    private String applicationName;
    private static final String STATUS_CODE_TEMPLATE = "status code: [%s]";

    private final MicroServiceTemplate microServiceTemplate;

    /**
     * Возвращяет экземпляр класса
     * @param microServiceTemplate - объект, реализующий интерфейс {@link MicroServiceTemplate}
     */
    public ProgramClient(MicroServiceTemplate microServiceTemplate) {
        this.microServiceTemplate = microServiceTemplate;
        this.applicationName = "insurance-service";
    }


    /**
     * Создать запись в справочнике программ страхования.
     * POST /insurance-service/v1/dict/programs
     *
     * @param createProgramRq Запрос создания записи в справочнике программ страховаия. (required)
     * @param timeout таймаут ожидания ответа на асинхронный запрос
     * @return Идентификатор созданной записи в справочнике.
     * @throws RestClientException в случае неудачи
    */
    public CreateProgramResponse createProgram(ProgramData createProgramRq, long timeout) throws RestClientException {
        return createProgram(createProgramRq).get(timeout);
    }

    /**
     * Создать запись в справочнике программ страхования. асинхронно
     * POST /insurance-service/v1/dict/programs
     *
     * @param createProgramRq Запрос создания записи в справочнике программ страховаия. (required)
     * @return Идентификатор созданной записи в справочнике.
     * @throws RestClientException в случае неудачи
    */
    public ClientRestResult<CreateProgramResponse> createProgram(ProgramData createProgramRq) throws RestClientException {
        return new ClientRestResult<>(createProgramInternal(createProgramRq), this::processStatusCodeErrors);
    }

    private ListenableFuture<ResponseEntity<CreateProgramResponse>> createProgramInternal(ProgramData createProgramRq) throws RestClientException {
        if (createProgramRq == null)
            throw new RestClientException(String.format(REQUIRED_PARAM_ERROR, "createProgramRq", "createProgram"));
        

        MicroServiceURIBuilder uriBuilder = JmsUriBuilder.service(applicationName)
            .path(cutComments("/insurance-service/v1/dict/programs"));

        RequestEntity requestEntity = RequestEntity
                  .method(HttpMethod.POST, uriBuilder.build())
                  .body(createProgramRq);
        return microServiceTemplate.exchange(requestEntity,
                    new ParameterizedTypeReference<CreateProgramResponse>(){});
    }

    /**
     * Удалить программу страхования.
     * DELETE /insurance-service/v1/dict/programs/{id}
     *
     * @param id Идентификатор программы страхования. (required)
     * @param timeout таймаут ожидания ответа на асинхронный запрос
     * @throws RestClientException в случае неудачи
    */
    public Void deleteProgram(Long id, long timeout) throws RestClientException {
        return deleteProgram(id).get(timeout);
    }

    /**
     * Удалить программу страхования. асинхронно
     * DELETE /insurance-service/v1/dict/programs/{id}
     *
     * @param id Идентификатор программы страхования. (required)
     * @throws RestClientException в случае неудачи
    */
    public ClientRestResult<Void> deleteProgram(Long id) throws RestClientException {
        return new ClientRestResult<>(deleteProgramInternal(id), this::processStatusCodeErrors);
    }

    private ListenableFuture<ResponseEntity<Void>> deleteProgramInternal(Long id) throws RestClientException {
        if (id == null)
            throw new RestClientException(String.format(REQUIRED_PARAM_ERROR, "id", "deleteProgram"));
        

        MicroServiceURIBuilder uriBuilder = JmsUriBuilder.service(applicationName)
            .path(cutComments("/insurance-service/v1/dict/programs/{id}")).variable("id", id);

        RequestEntity requestEntity = RequestEntity
                  .method(HttpMethod.DELETE, uriBuilder.build())
                  .build();
        return microServiceTemplate.exchange(requestEntity,
                    new ParameterizedTypeReference<Void>(){});
    }

    /**
     * Получить программу страхования.
     * GET /insurance-service/v1/dict/programs/{id}
     *
     * @param id Идентификатор программы страхования. (required)
     * @param timeout таймаут ожидания ответа на асинхронный запрос
     * @return Данные программы страхования.
     * @throws RestClientException в случае неудачи
    */
    public ProgramData getProgramById(Long id, long timeout) throws RestClientException {
        return getProgramById(id).get(timeout);
    }

    /**
     * Получить программу страхования. асинхронно
     * GET /insurance-service/v1/dict/programs/{id}
     *
     * @param id Идентификатор программы страхования. (required)
     * @return Данные программы страхования.
     * @throws RestClientException в случае неудачи
    */
    public ClientRestResult<ProgramData> getProgramById(Long id) throws RestClientException {
        return new ClientRestResult<>(getProgramByIdInternal(id), this::processStatusCodeErrors);
    }

    private ListenableFuture<ResponseEntity<ProgramData>> getProgramByIdInternal(Long id) throws RestClientException {
        if (id == null)
            throw new RestClientException(String.format(REQUIRED_PARAM_ERROR, "id", "getProgramById"));
        

        MicroServiceURIBuilder uriBuilder = JmsUriBuilder.service(applicationName)
            .path(cutComments("/insurance-service/v1/dict/programs/{id}")).variable("id", id);

        RequestEntity requestEntity = RequestEntity
                  .method(HttpMethod.GET, uriBuilder.build())
                  .build();
        return microServiceTemplate.exchange(requestEntity,
                    new ParameterizedTypeReference<ProgramData>(){});
    }

    /**
     * Получить список программ страхования
     * PUT /insurance-service/v1/dict/programs
     *
     * @param filterData Тело запроса с данными фильтрации (optional)
     * @param hasFilter Признак фильтрации программ страхования (optional)
     * @param timeout таймаут ожидания ответа на асинхронный запрос
     * @return 
     * @throws RestClientException в случае неудачи
    */
    public RestPageImpl<ProgramData> getPrograms(Pageable pageable, FilterProgramsRq filterData, Boolean hasFilter, long timeout) throws RestClientException {
        return getPrograms(pageable, filterData, hasFilter).get(timeout);
    }

    /**
     * Получить список программ страхования асинхронно
     * PUT /insurance-service/v1/dict/programs
     *
     * @param filterData Тело запроса с данными фильтрации (optional)
     * @param hasFilter Признак фильтрации программ страхования (optional)
     * @return 
     * @throws RestClientException в случае неудачи
    */
    public ClientRestResult<RestPageImpl<ProgramData>> getPrograms(Pageable pageable, FilterProgramsRq filterData, Boolean hasFilter) throws RestClientException {
        return new ClientRestResult<>(getProgramsInternal(pageable, filterData, hasFilter), this::processStatusCodeErrors);
    }

    private ListenableFuture<ResponseEntity<RestPageImpl<ProgramData>>> getProgramsInternal(Pageable pageable, FilterProgramsRq filterData, Boolean hasFilter) throws RestClientException {
        

        MicroServiceURIBuilder uriBuilder = JmsUriBuilder.service(applicationName)
            .path(cutComments("/insurance-service/v1/dict/programs"));

        addPageableParams(uriBuilder, pageable);
        if (hasFilter != null)
            uriBuilder.param("hasFilter", hasFilter);
        RequestEntity requestEntity = RequestEntity
                  .method(HttpMethod.PUT, uriBuilder.build())
                  .body(filterData);
        return microServiceTemplate.exchange(requestEntity,
                    new ParameterizedTypeReference<RestPageImpl<ProgramData>>(){});
    }

    /**
     * Обновить программу страхования.
     * PUT /insurance-service/v1/dict/programs/{id}
     *
     * @param id Идентификатор программы страхования. (required)
     * @param updateProgramRequest Запрос обновления программы страхования. (required)
     * @param timeout таймаут ожидания ответа на асинхронный запрос
     * @throws RestClientException в случае неудачи
    */
    public Void updateProgram(Long id, ProgramData updateProgramRequest, long timeout) throws RestClientException {
        return updateProgram(id, updateProgramRequest).get(timeout);
    }

    /**
     * Обновить программу страхования. асинхронно
     * PUT /insurance-service/v1/dict/programs/{id}
     *
     * @param id Идентификатор программы страхования. (required)
     * @param updateProgramRequest Запрос обновления программы страхования. (required)
     * @throws RestClientException в случае неудачи
    */
    public ClientRestResult<Void> updateProgram(Long id, ProgramData updateProgramRequest) throws RestClientException {
        return new ClientRestResult<>(updateProgramInternal(id, updateProgramRequest), this::processStatusCodeErrors);
    }

    private ListenableFuture<ResponseEntity<Void>> updateProgramInternal(Long id, ProgramData updateProgramRequest) throws RestClientException {
        if (id == null)
            throw new RestClientException(String.format(REQUIRED_PARAM_ERROR, "id", "updateProgram"));
        if (updateProgramRequest == null)
            throw new RestClientException(String.format(REQUIRED_PARAM_ERROR, "updateProgramRequest", "updateProgram"));
        

        MicroServiceURIBuilder uriBuilder = JmsUriBuilder.service(applicationName)
            .path(cutComments("/insurance-service/v1/dict/programs/{id}")).variable("id", id);

        RequestEntity requestEntity = RequestEntity
                  .method(HttpMethod.PUT, uriBuilder.build())
                  .body(updateProgramRequest);
        return microServiceTemplate.exchange(requestEntity,
                    new ParameterizedTypeReference<Void>(){});
    }
    private String cutComments(String path) {
        return path.split("#", 2)[0];
    }

    private void addPageableParams(MicroServiceURIBuilder builder, Pageable pageable) {
        if (pageable != null) {
            builder.param("page", pageable.getPageNumber());
            builder.param("size", pageable.getPageSize());
            Sort sort = pageable.getSort();
            if (sort != null) {
                List<String> sortParams = new ArrayList<>();
                for (Sort.Order next : sort) {
                    sortParams.add(next.getProperty());
                }
                sortParams.add(sort.getOrderFor(sortParams.get(0)).getDirection().name());
                builder.param("sort", String.join(",", sortParams));
            }
        }
    }

    private void processStatusCodeErrors(Exception e) throws RestClientException {
            HttpStatus statusCode = RestUtils.getStatusCode(e);
            if (statusCode != null) {
                switch (statusCode) {
                    case INTERNAL_SERVER_ERROR:
                        throw new RestClientException(String.format(STATUS_CODE_TEMPLATE, HttpStatus.INTERNAL_SERVER_ERROR.toString()));
                    case CONFLICT:
                        throw new EntityExistsException();
                    case NOT_FOUND:
                        throw new NotFoundException();
                }
            }
            throw new RestClientException(e.toString());
    }
}
