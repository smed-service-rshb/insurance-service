/*
 * API микросервиса управления договорами страхования
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package ru.softlab.efr.services.insurance;

import ru.softlab.efr.services.insurance.model.rest.ContractTemplatesRs;
import ru.softlab.efr.services.insurance.model.rest.ListInsuranceModel;
import ru.softlab.efr.services.insurance.model.rest.RedemptionList;
import org.springframework.core.io.Resource;
import ru.softlab.efr.services.insurance.model.rest.ViewInsuranceModel;

import ru.softlab.efr.infrastructure.transport.client.*;
import ru.softlab.efr.common.utilities.rest.*;
import ru.softlab.efr.common.utilities.rest.client.*;
import ru.softlab.efr.common.utilities.rest.converters.DateParser;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;

import ru.softlab.efr.infrastructure.transport.client.impl.JmsUriBuilder;

import org.springframework.core.ParameterizedTypeReference;
import org.springframework.http.*;
import org.springframework.util.*;
import org.springframework.util.concurrent.ListenableFuture;
import org.springframework.stereotype.Component;

import java.util.*;

/**
 * Содержит методы для взаимодействия с приложением insurance-service
 **/
@Component
public class ConsumerProductsClient {
    private static final String REQUIRED_PARAM_ERROR = "Не указан обязательный параметр '%s' при вызове %s";
    private String applicationName;
    private static final String STATUS_CODE_TEMPLATE = "status code: [%s]";

    private final MicroServiceTemplate microServiceTemplate;

    /**
     * Возвращяет экземпляр класса
     * @param microServiceTemplate - объект, реализующий интерфейс {@link MicroServiceTemplate}
     */
    public ConsumerProductsClient(MicroServiceTemplate microServiceTemplate) {
        this.microServiceTemplate = microServiceTemplate;
        this.applicationName = "insurance-service";
    }


    /**
     * Получить экземпляр договора страхования для клиента.
     * GET /insurance-service/v2/consumer/contracts/{id}
     *
     * @param id Идентификатор экземпляра договора страхования. (required)
     * @param timeout таймаут ожидания ответа на асинхронный запрос
     * @return Данные экземпляра договора страхования.
     * @throws RestClientException в случае неудачи
    */
    public ViewInsuranceModel getConsumerContractV2(Long id, long timeout) throws RestClientException {
        return getConsumerContractV2(id).get(timeout);
    }

    /**
     * Получить экземпляр договора страхования для клиента. асинхронно
     * GET /insurance-service/v2/consumer/contracts/{id}
     *
     * @param id Идентификатор экземпляра договора страхования. (required)
     * @return Данные экземпляра договора страхования.
     * @throws RestClientException в случае неудачи
    */
    public ClientRestResult<ViewInsuranceModel> getConsumerContractV2(Long id) throws RestClientException {
        return new ClientRestResult<>(getConsumerContractV2Internal(id), this::processStatusCodeErrors);
    }

    private ListenableFuture<ResponseEntity<ViewInsuranceModel>> getConsumerContractV2Internal(Long id) throws RestClientException {
        if (id == null)
            throw new RestClientException(String.format(REQUIRED_PARAM_ERROR, "id", "getConsumerContractV2"));
        

        MicroServiceURIBuilder uriBuilder = JmsUriBuilder.service(applicationName)
            .path(cutComments("/insurance-service/v2/consumer/contracts/{id}")).variable("id", id);

        RequestEntity requestEntity = RequestEntity
                  .method(HttpMethod.GET, uriBuilder.build())
                  .build();
        return microServiceTemplate.exchange(requestEntity,
                    new ParameterizedTypeReference<ViewInsuranceModel>(){});
    }

    /**
     * Получить перечень документов договора.
     * GET /insurance-service/v2/consumer/contracts/{id}/document/templates
     *
     * @param id Идентификатор экземпляра договора страхования. (required)
     * @param timeout таймаут ожидания ответа на асинхронный запрос
     * @return 
     * @throws RestClientException в случае неудачи
    */
    public ContractTemplatesRs getContractDocuments(Long id, long timeout) throws RestClientException {
        return getContractDocuments(id).get(timeout);
    }

    /**
     * Получить перечень документов договора. асинхронно
     * GET /insurance-service/v2/consumer/contracts/{id}/document/templates
     *
     * @param id Идентификатор экземпляра договора страхования. (required)
     * @return 
     * @throws RestClientException в случае неудачи
    */
    public ClientRestResult<ContractTemplatesRs> getContractDocuments(Long id) throws RestClientException {
        return new ClientRestResult<>(getContractDocumentsInternal(id), this::processStatusCodeErrors);
    }

    private ListenableFuture<ResponseEntity<ContractTemplatesRs>> getContractDocumentsInternal(Long id) throws RestClientException {
        if (id == null)
            throw new RestClientException(String.format(REQUIRED_PARAM_ERROR, "id", "getContractDocuments"));
        

        MicroServiceURIBuilder uriBuilder = JmsUriBuilder.service(applicationName)
            .path(cutComments("/insurance-service/v2/consumer/contracts/{id}/document/templates")).variable("id", id);

        RequestEntity requestEntity = RequestEntity
                  .method(HttpMethod.GET, uriBuilder.build())
                  .build();
        return microServiceTemplate.exchange(requestEntity,
                    new ParameterizedTypeReference<ContractTemplatesRs>(){});
    }

    /**
     * Получить список выкупных сумм для договора
     * GET /insurance-service/v2/consumer/contracts/{contractId}/redemption
     *
     * @param contractId Идентификатор договора (required)
     * @param timeout таймаут ожидания ответа на асинхронный запрос
     * @return 
     * @throws RestClientException в случае неудачи
    */
    public RedemptionList getRedemptionList(Long contractId, long timeout) throws RestClientException {
        return getRedemptionList(contractId).get(timeout);
    }

    /**
     * Получить список выкупных сумм для договора асинхронно
     * GET /insurance-service/v2/consumer/contracts/{contractId}/redemption
     *
     * @param contractId Идентификатор договора (required)
     * @return 
     * @throws RestClientException в случае неудачи
    */
    public ClientRestResult<RedemptionList> getRedemptionList(Long contractId) throws RestClientException {
        return new ClientRestResult<>(getRedemptionListInternal(contractId), this::processStatusCodeErrors);
    }

    private ListenableFuture<ResponseEntity<RedemptionList>> getRedemptionListInternal(Long contractId) throws RestClientException {
        if (contractId == null)
            throw new RestClientException(String.format(REQUIRED_PARAM_ERROR, "contractId", "getRedemptionList"));
        

        MicroServiceURIBuilder uriBuilder = JmsUriBuilder.service(applicationName)
            .path(cutComments("/insurance-service/v2/consumer/contracts/{contractId}/redemption")).variable("contractId", contractId);

        RequestEntity requestEntity = RequestEntity
                  .method(HttpMethod.GET, uriBuilder.build())
                  .build();
        return microServiceTemplate.exchange(requestEntity,
                    new ParameterizedTypeReference<RedemptionList>(){});
    }

    /**
     * Получить список всех экземпляров договоров страхования для клиента.
     * GET /insurance-service/v2/consumer/contracts
     *
     * @param timeout таймаут ожидания ответа на асинхронный запрос
     * @return Постраничный вывод договоров
     * @throws RestClientException в случае неудачи
    */
    public RestPageImpl<ListInsuranceModel> listConsumerContractV2(Pageable pageable, long timeout) throws RestClientException {
        return listConsumerContractV2(pageable).get(timeout);
    }

    /**
     * Получить список всех экземпляров договоров страхования для клиента. асинхронно
     * GET /insurance-service/v2/consumer/contracts
     *
     * @return Постраничный вывод договоров
     * @throws RestClientException в случае неудачи
    */
    public ClientRestResult<RestPageImpl<ListInsuranceModel>> listConsumerContractV2(Pageable pageable) throws RestClientException {
        return new ClientRestResult<>(listConsumerContractV2Internal(pageable), this::processStatusCodeErrors);
    }

    private ListenableFuture<ResponseEntity<RestPageImpl<ListInsuranceModel>>> listConsumerContractV2Internal(Pageable pageable) throws RestClientException {
        

        MicroServiceURIBuilder uriBuilder = JmsUriBuilder.service(applicationName)
            .path(cutComments("/insurance-service/v2/consumer/contracts"));

        addPageableParams(uriBuilder, pageable);
        RequestEntity requestEntity = RequestEntity
                  .method(HttpMethod.GET, uriBuilder.build())
                  .build();
        return microServiceTemplate.exchange(requestEntity,
                    new ParameterizedTypeReference<RestPageImpl<ListInsuranceModel>>(){});
    }

    /**
     * Получить данные печатной формы экземпляра договора страхования.
     * GET /insurance-service/v2/consumer/contracts/{id}/document/{templateId}/print
     *
     * @param id Идентификатор экземпляра договора страхования. (required)
     * @param templateId Идентификатор шаблона печатной формы. (required)
     * @param timeout таймаут ожидания ответа на асинхронный запрос
     * @return 
     * @throws RestClientException в случае неудачи
    */
    public Resource printContract(Long id, String templateId, long timeout) throws RestClientException {
        return printContract(id, templateId).get(timeout);
    }

    /**
     * Получить данные печатной формы экземпляра договора страхования. асинхронно
     * GET /insurance-service/v2/consumer/contracts/{id}/document/{templateId}/print
     *
     * @param id Идентификатор экземпляра договора страхования. (required)
     * @param templateId Идентификатор шаблона печатной формы. (required)
     * @return 
     * @throws RestClientException в случае неудачи
    */
    public ClientRestResult<Resource> printContract(Long id, String templateId) throws RestClientException {
        return new ClientRestResult<>(printContractInternal(id, templateId), this::processStatusCodeErrors);
    }

    private ListenableFuture<ResponseEntity<Resource>> printContractInternal(Long id, String templateId) throws RestClientException {
        if (id == null)
            throw new RestClientException(String.format(REQUIRED_PARAM_ERROR, "id", "printContract"));
        if (templateId == null)
            throw new RestClientException(String.format(REQUIRED_PARAM_ERROR, "templateId", "printContract"));
        

        MicroServiceURIBuilder uriBuilder = JmsUriBuilder.service(applicationName)
            .path(cutComments("/insurance-service/v2/consumer/contracts/{id}/document/{templateId}/print")).variable("id", id).variable("templateId", templateId);

        RequestEntity requestEntity = RequestEntity
                  .method(HttpMethod.GET, uriBuilder.build())
                  .build();
        return microServiceTemplate.exchange(requestEntity,
                    new ParameterizedTypeReference<Resource>(){});
    }

    /**
     * Отправить документы договора страхования на email клиента.
     * GET /insurance-service/v2/consumer/contracts/{id}/document/send
     *
     * @param id Идентификатор экземпляра договора страхования. (required)
     * @param email E-mail (optional)
     * @param timeout таймаут ожидания ответа на асинхронный запрос
     * @throws RestClientException в случае неудачи
    */
    public Void sendContractDocuments(Long id, String email, long timeout) throws RestClientException {
        return sendContractDocuments(id, email).get(timeout);
    }

    /**
     * Отправить документы договора страхования на email клиента. асинхронно
     * GET /insurance-service/v2/consumer/contracts/{id}/document/send
     *
     * @param id Идентификатор экземпляра договора страхования. (required)
     * @param email E-mail (optional)
     * @throws RestClientException в случае неудачи
    */
    public ClientRestResult<Void> sendContractDocuments(Long id, String email) throws RestClientException {
        return new ClientRestResult<>(sendContractDocumentsInternal(id, email), this::processStatusCodeErrors);
    }

    private ListenableFuture<ResponseEntity<Void>> sendContractDocumentsInternal(Long id, String email) throws RestClientException {
        if (id == null)
            throw new RestClientException(String.format(REQUIRED_PARAM_ERROR, "id", "sendContractDocuments"));
        

        MicroServiceURIBuilder uriBuilder = JmsUriBuilder.service(applicationName)
            .path(cutComments("/insurance-service/v2/consumer/contracts/{id}/document/send")).variable("id", id);

        if (email != null)
            uriBuilder.param("email", email);
        RequestEntity requestEntity = RequestEntity
                  .method(HttpMethod.GET, uriBuilder.build())
                  .build();
        return microServiceTemplate.exchange(requestEntity,
                    new ParameterizedTypeReference<Void>(){});
    }
    private String cutComments(String path) {
        return path.split("#", 2)[0];
    }

    private void addPageableParams(MicroServiceURIBuilder builder, Pageable pageable) {
        if (pageable != null) {
            builder.param("page", pageable.getPageNumber());
            builder.param("size", pageable.getPageSize());
            Sort sort = pageable.getSort();
            if (sort != null) {
                List<String> sortParams = new ArrayList<>();
                for (Sort.Order next : sort) {
                    sortParams.add(next.getProperty());
                }
                sortParams.add(sort.getOrderFor(sortParams.get(0)).getDirection().name());
                builder.param("sort", String.join(",", sortParams));
            }
        }
    }

    private void processStatusCodeErrors(Exception e) throws RestClientException {
            HttpStatus statusCode = RestUtils.getStatusCode(e);
            if (statusCode != null) {
                switch (statusCode) {
                    case INTERNAL_SERVER_ERROR:
                        throw new RestClientException(String.format(STATUS_CODE_TEMPLATE, HttpStatus.INTERNAL_SERVER_ERROR.toString()));
                    case CONFLICT:
                        throw new EntityExistsException();
                    case NOT_FOUND:
                        throw new NotFoundException();
                }
            }
            throw new RestClientException(e.toString());
    }
}
