/*
 * API микросервиса управления договорами страхования
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package ru.softlab.efr.services.insurance;

import java.time.LocalDate;
import ru.softlab.efr.services.insurance.model.rest.UuidRs;

import ru.softlab.efr.infrastructure.transport.client.*;
import ru.softlab.efr.common.utilities.rest.*;
import ru.softlab.efr.common.utilities.rest.client.*;
import ru.softlab.efr.common.utilities.rest.converters.DateParser;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;

import ru.softlab.efr.infrastructure.transport.client.impl.JmsUriBuilder;

import org.springframework.core.ParameterizedTypeReference;
import org.springframework.http.*;
import org.springframework.util.*;
import org.springframework.util.concurrent.ListenableFuture;
import org.springframework.stereotype.Component;

import java.util.*;

/**
 * Содержит методы для взаимодействия с приложением insurance-service
 **/
@Component
public class ChangeReportClient {
    private static final String REQUIRED_PARAM_ERROR = "Не указан обязательный параметр '%s' при вызове %s";
    private String applicationName;
    private static final String STATUS_CODE_TEMPLATE = "status code: [%s]";

    private final MicroServiceTemplate microServiceTemplate;

    /**
     * Возвращяет экземпляр класса
     * @param microServiceTemplate - объект, реализующий интерфейс {@link MicroServiceTemplate}
     */
    public ChangeReportClient(MicroServiceTemplate microServiceTemplate) {
        this.microServiceTemplate = microServiceTemplate;
        this.applicationName = "insurance-service";
    }


    /**
     * Создать отчёт по изменениям от определённой даты в папке с отчётами
     * GET /insurance-service/v2/changereport/generate
     *
     * @param createDate Дата (С) создания изменения (required)
     * @param endDate Дата (ПО) создания изменения (optional)
     * @param timeout таймаут ожидания ответа на асинхронный запрос
     * @return 
     * @throws RestClientException в случае неудачи
    */
    public UuidRs generateChangeReport(LocalDate createDate, LocalDate endDate, long timeout) throws RestClientException {
        return generateChangeReport(createDate, endDate).get(timeout);
    }

    /**
     * Создать отчёт по изменениям от определённой даты в папке с отчётами асинхронно
     * GET /insurance-service/v2/changereport/generate
     *
     * @param createDate Дата (С) создания изменения (required)
     * @param endDate Дата (ПО) создания изменения (optional)
     * @return 
     * @throws RestClientException в случае неудачи
    */
    public ClientRestResult<UuidRs> generateChangeReport(LocalDate createDate, LocalDate endDate) throws RestClientException {
        return new ClientRestResult<>(generateChangeReportInternal(createDate, endDate), this::processStatusCodeErrors);
    }

    private ListenableFuture<ResponseEntity<UuidRs>> generateChangeReportInternal(LocalDate createDate, LocalDate endDate) throws RestClientException {
        if (createDate == null)
            throw new RestClientException(String.format(REQUIRED_PARAM_ERROR, "createDate", "generateChangeReport"));
        

        MicroServiceURIBuilder uriBuilder = JmsUriBuilder.service(applicationName)
            .path(cutComments("/insurance-service/v2/changereport/generate"));

        if (createDate != null)
            uriBuilder.param("createDate", DateParser.format(createDate));
        if (endDate != null)
            uriBuilder.param("endDate", DateParser.format(endDate));
        RequestEntity requestEntity = RequestEntity
                  .method(HttpMethod.GET, uriBuilder.build())
                  .build();
        return microServiceTemplate.exchange(requestEntity,
                    new ParameterizedTypeReference<UuidRs>(){});
    }
    private String cutComments(String path) {
        return path.split("#", 2)[0];
    }

    private void addPageableParams(MicroServiceURIBuilder builder, Pageable pageable) {
        if (pageable != null) {
            builder.param("page", pageable.getPageNumber());
            builder.param("size", pageable.getPageSize());
            Sort sort = pageable.getSort();
            if (sort != null) {
                List<String> sortParams = new ArrayList<>();
                for (Sort.Order next : sort) {
                    sortParams.add(next.getProperty());
                }
                sortParams.add(sort.getOrderFor(sortParams.get(0)).getDirection().name());
                builder.param("sort", String.join(",", sortParams));
            }
        }
    }

    private void processStatusCodeErrors(Exception e) throws RestClientException {
            HttpStatus statusCode = RestUtils.getStatusCode(e);
            if (statusCode != null) {
                switch (statusCode) {
                    case INTERNAL_SERVER_ERROR:
                        throw new RestClientException(String.format(STATUS_CODE_TEMPLATE, HttpStatus.INTERNAL_SERVER_ERROR.toString()));
                    case CONFLICT:
                        throw new EntityExistsException();
                    case NOT_FOUND:
                        throw new NotFoundException();
                }
            }
            throw new RestClientException(e.toString());
    }
}
